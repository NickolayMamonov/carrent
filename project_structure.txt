// Project Structure Dump

// File: package.json
{
  "name": "carrent",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.1.3",
    "@radix-ui/react-icons": "^1.3.1",
    "@radix-ui/react-slot": "^1.1.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.454.0",
    "next": "14.2.16",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.16",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


// File: tsconfig.json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


// File: .env
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_cmljaC1sYXJrLTkzLmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_7VQqULL3jclPqRfo5HN4Q5yxShkBuzRD5K7Hki8uqK
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/

DATABASE_URL="postgresql://postgres:postgres@localhost:5432/rent_car"

// File: .gitignore
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


// File: middleware.ts
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'

const isPublicRoute = createRouteMatcher([
    '/sign-in(.*)', '/sign-up(.*)','/','car-details/:id','/api/auth/uploadthing'])

export default clerkMiddleware(async (auth, request) => {
    if (!isPublicRoute(request)) {
        await auth.protect()
    }
})

export const config = {
    matcher: [
        // Skip Next.js internals and all static files, unless found in search params
        '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
        // Always run for API routes
        '/(api|trpc)(.*)',
    ],
};

// File: next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


// File: tailwind.config.ts
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


// File: actions\getCarById.ts
import {prismadb} from "@/lib/prismadb";

export const getCarById = async(carId: string) => {
    try {
        const car = await prismadb.car.findUnique({
            where: {
                id: carId
            },
            include: {
                bookings: true
            }
        });
        if(!car) return null;

        return car;

    }catch (e: any) {
        throw new Error(e)
    }

}

// File: app\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


// File: app\layout.tsx
import {ClerkProvider} from "@clerk/nextjs";
import type {Metadata} from "next";
import localFont from "next/font/local";
import "./globals.css";
import NavBar from "@/components/layout/NavBar";
import Container from "@/components/Container";

const geistSans = localFont({
    src: "./fonts/GeistVF.woff",
    variable: "--font-geist-sans",
    weight: "100 900",
});
const geistMono = localFont({
    src: "./fonts/GeistMonoVF.woff",
    variable: "--font-geist-mono",
    weight: "100 900",
});

export const metadata: Metadata = {
    title: "RentCar",
    description: "Rent a car of your choice",
    icons: {icon: '/logo.svg'}
};

export default function RootLayout({children,}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <ClerkProvider>
            <html lang="en" suppressHydrationWarning>
            <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
            <main className="flex flex-col min-h-screen bg-secondary">
                <NavBar/>
                <section className="flex-grow">
                    <Container>
                        {children}
                    </Container>
                </section>
            </main>
            </body>
            </html>
        </ClerkProvider>
    );
}


// File: app\page.tsx
import Image from "next/image";

export default function Home() {
  return (
    <div>
      Home Page
    </div>
  );
}


// File: app\(clerk)\layout.tsx
import React from "react";

const ClerkLayout =({children} : {children: React.ReactNode}) => {
    return(
        <div className={"h-screen flex items-center justify-center"}>
            {children}
        </div>

    );
}

export default ClerkLayout;

// File: app\(clerk)\sign-in\[[...sign-in]]\page.tsx
import {SignIn} from "@clerk/nextjs";

export default function Page(){
    return <SignIn/>
}

// File: app\(clerk)\sign-up\[[...sign-up]]\page.tsx
import {SignUp} from "@clerk/nextjs";

export default function Page(){
    return <SignUp/>;
}

// File: app\cars\page.tsx
import { Button } from "@/components/ui/button";
import CarFilter from "@/components/cars/CarFilter";
import CarGrid from "@/components/cars/CarGrid";
import { Search, SlidersHorizontal } from "lucide-react";

export default function CarsPage() {
    return (
        <div className="space-y-8 py-6">
            {/* Hero Section */}
            <div className="space-y-4">
                <h1 className="text-4xl font-bold">Find Your Perfect Rental Car</h1>
                <p className="text-lg text-muted-foreground">
                    Choose from our wide selection of vehicles for any occasion
                </p>
            </div>

            {/* Search and Filters */}
            <div className="flex flex-col md:flex-row gap-4">
                <div className="relative flex-grow">
                    <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground" />
                    <input
                        type="text"
                        placeholder="Search by make, model, or type..."
                        className="w-full rounded-lg border pl-10 pr-4 py-2 text-base"
                    />
                </div>
                <CarFilter />
            </div>

            {/* Car Grid */}
            <CarGrid />
        </div>
    );
}

// File: app\cars\[carId]\page.tsx
import AddCarForm from "@/components/cars/AddCarForm";
import {getCarById} from "@/actions/getCarById";
import {auth} from "@clerk/nextjs/server";

interface CarPageProps {
    params:{
        carId: string
    }
}

const Car = async ({params}: CarPageProps) => {
    const car = await getCarById(params.carId)
    return (<div>
        <AddCarForm/>
    </div>);
}

export default Car;

// File: app\how-it-works\page.tsx
import { Car, Calendar, CreditCard, CheckCircle } from "lucide-react";

const steps = [
    {
        icon: Car,
        title: "Choose Your Car",
        description: "Browse our selection of vehicles and choose the perfect car for your needs."
    },
    {
        icon: Calendar,
        title: "Select Dates",
        description: "Pick your preferred pickup and return dates and location."
    },
    {
        icon: CreditCard,
        title: "Book & Pay",
        description: "Complete your booking with our secure payment system."
    },
    {
        icon: CheckCircle,
        title: "Enjoy Your Ride",
        description: "Pick up your car and enjoy your journey with our premium service."
    }
];

export default function HowItWorksPage() {
    return (
        <div className="py-12">
            <div className="text-center mb-12">
                <h1 className="text-4xl font-bold mb-4">How RentCar Works</h1>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                    Renting a car has never been easier. Follow these simple steps to get started.
                </p>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto">
                {steps.map((step, index) => (
                    <div key={index} className="text-center space-y-4">
                        <div className="w-16 h-16 mx-auto bg-primary/10 rounded-full flex items-center justify-center">
                            <step.icon className="w-8 h-8 text-primary" />
                        </div>
                        <h3 className="text-xl font-semibold">{step.title}</h3>
                        <p className="text-muted-foreground">{step.description}</p>
                    </div>
                ))}
            </div>

            <div className="mt-16 text-center">
                <h2 className="text-2xl font-semibold mb-8">Why Choose RentCar?</h2>
                <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
                    <div className="space-y-2">
                        <h3 className="text-lg font-medium">Best Prices</h3>
                        <p className="text-muted-foreground">Competitive rates and no hidden fees</p>
                    </div>
                    <div className="space-y-2">
                        <h3 className="text-lg font-medium">24/7 Support</h3>
                        <p className="text-muted-foreground">Always here to help when you need us</p>
                    </div>
                    <div className="space-y-2">
                        <h3 className="text-lg font-medium">Clean Cars</h3>
                        <p className="text-muted-foreground">All vehicles thoroughly cleaned and sanitized</p>
                    </div>
                </div>
            </div>
        </div>
    );
}

// File: components\Container.tsx
import React from "react";

const Container = ({children}: { children: React.ReactNode }) => {
    return (<div className="max-w-[1920px] w-full mx-auto x1:px-20 px-4 py-4">
        {children}
    </div>)
}

export default Container;

// File: components\cars\AddCarForm.tsx
'use client'

const AddCarForm = () => {
    return (<div>
        Add
    </div>);
}

export default AddCarForm

// File: components\cars\CarCard.tsx
import { Car } from "@/lib/types/car";
import { Button } from "@/components/ui/button";
import Image from "next/image";
import Link from "next/link";

interface CarCardProps {
    car: Car;
}

export default function CarCard({ car }: CarCardProps) {
    return (
        <div className="rounded-lg border bg-card overflow-hidden">
            {/* Car Image */}
            <div className="relative h-48 w-full">
                <Image
                    src={car.images[0]}
                    alt={`${car.make} ${car.model}`}
                    fill
                    className="object-cover"
                />
            </div>

            {/* Car Details */}
            <div className="p-4 space-y-4">
                <div>
                    <h3 className="text-xl font-semibold">{car.make} {car.model}</h3>
                    <p className="text-muted-foreground">{car.year} • {car.type}</p>
                </div>

                <div className="flex items-center gap-2">
                    {car.features.slice(0, 3).map((feature) => (
                        <span
                            key={feature}
                            className="px-2 py-1 text-xs rounded-full bg-secondary"
                        >
              {feature}
            </span>
                    ))}
                </div>

                <div className="flex items-center justify-between">
                    <div>
                        <span className="text-2xl font-bold">${car.pricePerDay}</span>
                        <span className="text-muted-foreground">/day</span>
                    </div>
                    <Link href={`/cars/${car.id}`}>
                        <Button>View Details</Button>
                    </Link>
                </div>
            </div>
        </div>
    );
}

// File: components\cars\CarFilter.tsx
'use client'

import { Button } from "@/components/ui/button";
import { SlidersHorizontal } from "lucide-react";
import { useState } from "react";

export default function CarFilter() {
    const [filtersVisible, setFiltersVisible] = useState(false);

    return (
        <div className="relative">
            <Button
                variant="outline"
                onClick={() => setFiltersVisible(!filtersVisible)}
                className="flex items-center gap-2"
            >
                <SlidersHorizontal className="h-5 w-5" />
                Filters
            </Button>

            {filtersVisible && (
                <div className="absolute right-0 top-full mt-2 w-72 rounded-lg border bg-background p-4 shadow-lg">
                    <div className="space-y-4">
                        {/* Price Range */}
                        <div>
                            <label className="text-sm font-medium">Price Range</label>
                            <div className="flex gap-2 mt-1">
                                <input
                                    type="number"
                                    placeholder="Min"
                                    className="w-full rounded border px-3 py-1"
                                />
                                <input
                                    type="number"
                                    placeholder="Max"
                                    className="w-full rounded border px-3 py-1"
                                />
                            </div>
                        </div>

                        {/* Vehicle Type */}
                        <div>
                            <label className="text-sm font-medium">Vehicle Type</label>
                            <div className="mt-1 space-y-2">
                                {['Sedan', 'SUV', 'Sports Car', 'Van'].map((type) => (
                                    <label key={type} className="flex items-center gap-2">
                                        <input type="checkbox" className="rounded" />
                                        <span>{type}</span>
                                    </label>
                                ))}
                            </div>
                        </div>

                        {/* Features */}
                        <div>
                            <label className="text-sm font-medium">Features</label>
                            <div className="mt-1 space-y-2">
                                {['Air Conditioning', 'GPS', 'Bluetooth', 'Automatic'].map((feature) => (
                                    <label key={feature} className="flex items-center gap-2">
                                        <input type="checkbox" className="rounded" />
                                        <span>{feature}</span>
                                    </label>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}

// File: components\cars\CarGrid.tsx
'use client'

import { Car } from "@/lib/types/car";
import CarCard from "./CarCard";

const DEMO_CARS: Car[] = [
  {
    id: '1',
    make: 'Toyota',
    model: 'Camry',
    year: 2023,
    pricePerDay: 65,
    type: 'Sedan',
    images: ['/cars/camry.jpg'],
    features: ['Automatic', 'Bluetooth', 'Cruise Control'],
    availability: true,
  },
  {
    id: '2',
    make: 'Honda',
    model: 'CR-V',
    year: 2023,
    pricePerDay: 85,
    type: 'SUV',
    images: ['/cars/crv.jpg'],
    features: ['AWD', 'Backup Camera', 'Apple CarPlay'],
    availability: true,
  },
  // Добавьте больше демо-автомобилей по необходимости
];

export default function CarGrid() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {DEMO_CARS.map((car) => (
        <CarCard key={car.id} car={car} />
      ))}
    </div>
  );
}

// File: components\layout\NavBar.tsx
'use client'

import { UserButton, SignedIn, SignedOut } from "@clerk/nextjs";
import Container from "@/components/Container";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Car, Menu, X } from "lucide-react";
import { useState } from "react";

const NavItems = [
    {
        label: 'Find a Car',
        href: '/cars',
    },
    {
        label: 'How It Works',
        href: '/how-it-works',
    },
    {
        label: 'About',
        href: '/about',
    },
    {
        label: 'Contact',
        href: '/contact',
    },
];

const NavBar = () => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);

    return (
        <div className="sticky top-0 z-50 border-b bg-background/95 backdrop-blur">
            <Container>
                <div className="flex h-20 items-center justify-between"> {/* Увеличена высота навбара */}
                    {/* Logo & Brand */}
                    <Link href="/" className="flex items-center gap-3">
                        <Car className="h-8 w-8" /> {/* Увеличена иконка */}
                        <span className="font-bold text-2xl hidden sm:block">RentCar</span> {/* Увеличен логотип */}
                    </Link>

                    {/* Desktop Navigation */}
                    <nav className="hidden md:flex items-center gap-8">
                        {NavItems.map((item) => (
                            <Link
                                key={item.href}
                                href={item.href}
                                className="text-base font-medium transition-colors hover:text-primary" // Увеличен размер текста навигации
                            >
                                {item.label}
                            </Link>
                        ))}
                    </nav>

                    {/* Auth Buttons */}
                    <div className="flex items-center gap-4">
                        <SignedOut>
                            <div className="hidden sm:flex items-center gap-3">
                                <Link href="/sign-in">
                                    <Button
                                        variant="outline"
                                        className="text-base px-6 py-2 h-11" // Увеличены кнопки
                                    >
                                        Sign in
                                    </Button>
                                </Link>
                                <Link href="/sign-up">
                                    <Button
                                        className="text-base px-6 py-2 h-11" // Увеличены кнопки
                                    >
                                        Start Renting
                                    </Button>
                                </Link>
                            </div>
                        </SignedOut>

                        <SignedIn>
                            <Link href="/dashboard" className="hidden sm:block">
                                <Button
                                    variant="outline"
                                    className="text-base px-6 py-2 h-11" // Увеличены кнопки
                                >
                                    My Rentals
                                </Button>
                            </Link>
                            <UserButton
                                afterSignOutUrl="/"
                                appearance={{
                                    elements: {
                                        avatarBox: "h-11 w-11", // Увеличен аватар
                                        userButtonPopoverCard: "shadow-lg",
                                        userButtonPopoverActionButton: "text-base" // Увеличен текст в меню пользователя
                                    }
                                }}
                            />
                        </SignedIn>

                        {/* Mobile Menu Button */}
                        <button
                            className="md:hidden hover:bg-accent rounded-md p-2"
                            onClick={() => setIsMenuOpen(!isMenuOpen)}
                        >
                            {isMenuOpen ? (
                                <X className="h-7 w-7" /> // Увеличена иконка меню
                            ) : (
                                <Menu className="h-7 w-7" /> // Увеличена иконка меню
                            )}
                        </button>
                    </div>
                </div>

                {/* Mobile Menu */}
                {isMenuOpen && (
                    <div className="absolute top-20 left-0 right-0 bg-background border-b md:hidden">
                        <Container>
                            <nav className="flex flex-col py-6 gap-4"> {/* Увеличены отступы */}
                                {NavItems.map((item) => (
                                    <Link
                                        key={item.href}
                                        href={item.href}
                                        className="text-lg px-3 py-2 hover:text-primary transition-colors" // Увеличен размер текста
                                        onClick={() => setIsMenuOpen(false)}
                                    >
                                        {item.label}
                                    </Link>
                                ))}
                                <SignedOut>
                                    <div className="flex flex-col gap-3 pt-6 border-t mt-2"> {/* Увеличены отступы */}
                                        <Link
                                            href="/sign-in"
                                            onClick={() => setIsMenuOpen(false)}
                                        >
                                            <Button
                                                variant="outline"
                                                className="w-full text-base h-11" // Увеличены кнопки
                                            >
                                                Sign in
                                            </Button>
                                        </Link>
                                        <Link
                                            href="/sign-up"
                                            onClick={() => setIsMenuOpen(false)}
                                        >
                                            <Button
                                                className="w-full text-base h-11" // Увеличены кнопки
                                            >
                                                Start Renting
                                            </Button>
                                        </Link>
                                    </div>
                                </SignedOut>
                                <SignedIn>
                                    <Link
                                        href="/dashboard"
                                        className="text-lg px-3 py-2 hover:text-primary transition-colors" // Увеличен размер текста
                                        onClick={() => setIsMenuOpen(false)}
                                    >
                                        My Rentals
                                    </Link>
                                </SignedIn>
                            </nav>
                        </Container>
                    </div>
                )}
            </Container>
        </div>
    );
}

export default NavBar;

// File: components\ui\button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
    "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
    {
        variants: {
            variant: {
                default:
                    "bg-primary text-primary-foreground shadow hover:bg-primary/90",
                destructive:
                    "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
                outline:
                    "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
                secondary:
                    "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
                ghost: "hover:bg-accent hover:text-accent-foreground",
                link: "text-primary underline-offset-4 hover:underline",
            },
            size: {
                default: "h-9 px-4 py-2",
                sm: "h-8 rounded-md px-3 text-xs",
                lg: "h-10 rounded-md px-8",
                icon: "h-9 w-9",
            },
        },
        defaultVariants: {
            variant: "default",
            size: "default",
        },
    }
)

export interface ButtonProps
    extends React.ButtonHTMLAttributes<HTMLButtonElement>,
        VariantProps<typeof buttonVariants> {
    asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    ({ className, variant, size, asChild = false, ...props }, ref) => {
        const Comp = asChild ? Slot : "button"
        return (
            <Comp
                className={cn(buttonVariants({ variant, size, className }))}
                ref={ref}
                {...props}
            />
        )
    }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// File: lib\prismadb.ts
import {PrismaClient} from "@prisma/client";

declare global {

    // eslint-disable-next-line no-var
    var prisma: PrismaClient | undefined;
}


export const prismadb = globalThis.prisma || new PrismaClient();

if(process.env.NODE_ENV !== 'production') globalThis.prisma = prismadb;

// File: lib\utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// File: lib\types\car.ts
export interface Car {
    id: string;
    make: string;
    model: string;
    year: number;
    pricePerDay: number;
    type: string;
    images: string[];
    features: string[];
    availability: boolean;
    description?: string;
    specifications?: {
        transmission?: string;
        fuelType?: string;
        seats?: number;
        luggage?: number;
        mileage?: string;
    };
}

export interface CarFilter {
    priceRange?: {
        min: number;
        max: number;
    };
    types?: string[];
    features?: string[];
    availability?: boolean;
}

// File: prisma\schema.prisma
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  id          String    @id @default(cuid())
  make        String
  model       String
  year        Int
  pricePerDay Decimal   @db.Decimal(10, 2)
  type        String
  images      String[]
  features    String[]
  availability Boolean  @default(true)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  specifications CarSpecification?

  @@index([make, model])
  @@index([type])
  @@index([availability])
}

model CarSpecification {
  id           String  @id @default(cuid())
  transmission String?
  fuelType     String?
  seats        Int?
  luggage      Int?
  mileage      String?
  car          Car     @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId        String  @unique

  @@index([transmission])
  @@index([fuelType])
}

model Booking {
  id          String   @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Decimal  @db.Decimal(10, 2)
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  car         Car      @relation(fields: [carId], references: [id])
  carId       String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  extras     BookingExtras?

  @@index([userId])
  @@index([status])
  @@index([startDate, endDate])
}

model BookingExtras {
  id              String  @id @default(cuid())
  gps             Boolean @default(false)
  childSeat       Boolean @default(false)
  additionalDriver Boolean @default(false)
  booking         Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId       String  @unique
}

