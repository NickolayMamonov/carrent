// Project Structure Dump

// File: package.json
{
  "name": "carrent",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:start": "docker compose up -d",
    "db:stop": "docker compose down",
    "db:restart": "docker compose down && docker compose up -d",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev",
    "prisma:deploy": "prisma migrate deploy",
    "prisma:studio": "prisma studio",
    "db:seed": "ts-node prisma/seed.ts",
    "lint": "next lint",
    "lint:fix": "next lint --fix"
  },
  "prisma": {
    "seed": "ts-node prisma/seed.ts"
  },
  "dependencies": {
    "@prisma/client": "^6.1.0",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-slot": "^1.1.1",
    "bcryptjs": "^2.4.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.454.0",
    "next": "14.2.16",
    "react": "^18",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.0.3",
    "zustand": "^5.0.2"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/node": "^20.17.11",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^8.19.1",
    "@typescript-eslint/parser": "^8.19.1",
    "eslint": "^8",
    "eslint-config-next": "14.2.16",
    "postcss": "^8",
    "prisma": "^6.1.0",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.2"
  }
}


// File: tsconfig.json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


// File: next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
    images: {
        domains: ['localhost'],
        unoptimized: true
    },
    async headers() {
        return [
            {
                source: '/api/:path*',
                headers: [
                    { key: 'Access-Control-Allow-Credentials', value: 'true' },
                    { key: 'Access-Control-Allow-Origin', value: '*' },
                    { key: 'Access-Control-Allow-Methods', value: 'GET,DELETE,PATCH,POST,PUT' },
                    { key: 'Access-Control-Allow-Headers', value: 'Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date' }
                ]
            }
        ]
    }
};

module.exports = nextConfig;

// File: .env
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/carrent?schema=public"
JWT_SECRET="7b3d8f45a1c6e9b2d0h4i7k2l5n8p1r4t7v0x3z6y9m2q5w8"
REFRESH_TOKEN_SECRET="9d4b7e2f1a8c5h3i6k9l2n5p8r1t4v7x0z3y6m9q2w5s8u1"

// File: .gitignore
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


// File: middleware.ts
// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken';

const publicRoutes = ['/', '/cars', '/about', '/contact', '/how-it-works', '/sign-in', '/sign-up'];
const protectedRoutes = ['/dashboard', '/profile'];
const adminRoutes = ['/admin'];
const editorRoutes = ['/editor'];

export async function middleware(request: NextRequest) {
    const { pathname } = request.nextUrl;

    // Пропускаем публичные маршруты и API
    if (publicRoutes.includes(pathname) || pathname.startsWith('/api/')) {
        return NextResponse.next();
    }

    // Проверяем токен
    const token = request.cookies.get('auth-token')?.value;
    const refreshToken = request.cookies.get('refresh-token')?.value;

    // Если нет токенов и маршрут защищённый, редиректим на авторизацию
    if (!token && !refreshToken) {
        if (protectedRoutes.some(route => pathname.startsWith(route)) ||
            adminRoutes.some(route => pathname.startsWith(route)) ||
            editorRoutes.some(route => pathname.startsWith(route))) {
            const url = new URL('/sign-in', request.url);
            url.searchParams.set('redirectTo', pathname);
            return NextResponse.redirect(url);
        }
    }

    if (token) {
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET!) as {
                role: string;
                userId: string;
            };

            // Проверка доступа к админским маршрутам
            if (pathname.startsWith('/admin') && decoded.role !== 'ADMIN') {
                return NextResponse.redirect(new URL('/', request.url));
            }

            // Проверка доступа к маршрутам редактора
            if (pathname.startsWith('/editor') &&
                !['ADMIN', 'EDITOR'].includes(decoded.role)) {
                return NextResponse.redirect(new URL('/', request.url));
            }

            return NextResponse.next();
        } catch {
            // При невалидном токене пробуем использовать refresh token
            if (refreshToken) {
                const response = NextResponse.next();
                response.headers.set('x-refresh-token', refreshToken);
                return response;
            }

            // Если токен недействителен и нет refresh token, редиректим
            const response = NextResponse.redirect(new URL('/sign-in', request.url));
            response.cookies.delete('auth-token');
            response.cookies.delete('refresh-token');
            return response;
        }
    }

    return NextResponse.next();
}

export const config = {
    matcher: [
        '/((?!_next/static|_next/image|favicon.ico|public/).*)',
    ],
};

// File: next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


// File: next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
    images: {
        domains: ['localhost'],
        unoptimized: true
    },
    async headers() {
        return [
            {
                source: '/api/:path*',
                headers: [
                    { key: 'Access-Control-Allow-Credentials', value: 'true' },
                    { key: 'Access-Control-Allow-Origin', value: '*' },
                    { key: 'Access-Control-Allow-Methods', value: 'GET,DELETE,PATCH,POST,PUT' },
                    { key: 'Access-Control-Allow-Headers', value: 'Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date' }
                ]
            }
        ]
    }
};

module.exports = nextConfig;

// File: tailwind.config.ts
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


// File: app\error.tsx
'use client';

import ErrorPage from "@/components/error/ErrorPage";

interface ErrorProps {
    error: Error;
    reset: () => void;
}

export default function Error({ error }: ErrorProps) {
    return (
        <ErrorPage
            code={500}
            title="Что-то пошло не так"
            description={
                error?.message ||
                "Произошла непредвиденная ошибка. Пожалуйста, попробуйте позже."
            }
            showBackButton={false}
            showHomeButton={true}
        />
    );
}

// File: app\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


// File: app\layout.tsx
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import NavBar from "@/components/layout/NavBar";
import Container from "@/components/Container";

const geistSans = localFont({
    src: "./fonts/GeistVF.woff",
    variable: "--font-geist-sans",
    weight: "100 900",
});

const geistMono = localFont({
    src: "./fonts/GeistMonoVF.woff",
    variable: "--font-geist-mono",
    weight: "100 900",
});

export const metadata: Metadata = {
    title: "RentCar",
    description: "Rent a car of your choice",
    icons: {icon: '/logo.svg'}
};

export default function RootLayout({children}: {children: React.ReactNode}) {
    return (
        <html lang="en" suppressHydrationWarning>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <main className="flex flex-col min-h-screen bg-secondary">
            <NavBar/>
            <section className="flex-grow">
                <Container>
                    {children}
                </Container>
            </section>
        </main>
        </body>
        </html>
    );
}

// File: app\loading.tsx
import Loading from '@/components/ui/loading';
export default Loading;

// File: app\not-found.tsx
import ErrorPage from "@/components/error/ErrorPage";

export default function NotFound() {
    return (
        <ErrorPage
            code={404}
            title="Страница не найдена"
            description="Извините, мы не смогли найти страницу, которую вы ищете."
        />
    );
}

// File: app\page.tsx
import { HeroSection } from '@/components/sections/HeroSection';
import { FeatureSection } from '@/components/sections/FeatureSection';
import FeaturedCarsSection from '@/components/sections/FeaturedCarsSection';
import { CTASection } from '@/components/sections/CTASection';

export default function Home() {
    return (
        <div className="space-y-24 pb-8">
            <HeroSection />
            <FeatureSection />
            <FeaturedCarsSection />
            <CTASection />
        </div>
    );
}

// File: app\about\page.tsx
import { Shield, Users, Trophy, Timer } from "lucide-react";

const stats = [
    { number: "1000+", label: "Довольных клиентов" },
    { number: "50+", label: "Автомобилей в парке" },
    { number: "5", label: "Лет на рынке" },
    { number: "24/7", label: "Поддержка клиентов" },
];

const values = [
    {
        icon: Shield,
        title: "Надёжность",
        description: "Мы гарантируем безопасность и качество наших услуг"
    },
    {
        icon: Users,
        title: "Клиентоориентированность",
        description: "Индивидуальный подход к каждому клиенту"
    },
    {
        icon: Trophy,
        title: "Качество",
        description: "Только проверенные и обслуженные автомобили"
    },
    {
        icon: Timer,
        title: "Оперативность",
        description: "Быстрое оформление и выдача автомобилей"
    }
];

export default function AboutPage() {
    return (
        <div className="py-12">
            {/* Hero Section */}
            <div className="text-center mb-16">
                <h1 className="text-4xl font-bold mb-4">О компании RentCar</h1>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                    Мы предоставляем услуги аренды премиальных автомобилей с 2019 года,
                    делая ваши поездки комфортными и незабываемыми
                </p>
            </div>

            {/* Stats */}
            <div className="bg-secondary py-16 px-4 mb-20">
                <div className="max-w-6xl mx-auto grid grid-cols-2 md:grid-cols-4 gap-8">
                    {stats.map((stat, index) => (
                        <div key={index} className="text-center">
                            <div className="text-3xl font-bold text-primary mb-2">{stat.number}</div>
                            <div className="text-muted-foreground">{stat.label}</div>
                        </div>
                    ))}
                </div>
            </div>

            {/* Our Story */}
            <div className="max-w-4xl mx-auto px-4 mb-20">
                <h2 className="text-2xl font-bold mb-6">Наша история</h2>
                <div className="prose prose-lg">
                    <p className="text-muted-foreground">
                        RentCar начала свою деятельность в 2019 году с небольшого парка из 10 автомобилей.
                        За пять лет работы мы значительно расширили автопарк и географию присутствия,
                        став одним из лидеров рынка аренды премиальных автомобилей.
                    </p>
                    <p className="text-muted-foreground mt-4">
                        Наша миссия — сделать аренду автомобилей максимально простой и доступной,
                        предоставляя клиентам первоклассный сервис и широкий выбор автомобилей.
                    </p>
                </div>
            </div>

            {/* Our Values */}
            <div className="max-w-6xl mx-auto px-4">
                <h2 className="text-2xl font-bold mb-8 text-center">Наши ценности</h2>
                <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
                    {values.map((value, index) => (
                        <div key={index} className="text-center space-y-4">
                            <div className="w-16 h-16 mx-auto bg-primary/10 rounded-full flex items-center justify-center">
                                <value.icon className="w-8 h-8 text-primary" />
                            </div>
                            <h3 className="text-xl font-semibold">{value.title}</h3>
                            <p className="text-muted-foreground">{value.description}</p>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
}

// File: app\admin\users\page.tsx
'use client';

import Image from 'next/image';
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { User } from '@/lib/types/user';
import { Shield, User as UserIcon, Pencil } from 'lucide-react';
export const dynamic = 'force-dynamic';

export default function AdminUsersPage() {
    const [users, setUsers] = useState<User[]>([]);
    const [loading, setLoading] = useState(true);
    const [editingUser, setEditingUser] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        fetchUsers();
    }, []);

    const fetchUsers = async () => {
        try {
            const response = await fetch('/api/admin/users');
            if (response.ok) {
                const data = await response.json();
                setUsers(data.users);
            } else {
                throw new Error('Failed to fetch users');
            }
        } catch (error) {
            console.error('Error fetching users:', error);
            setError('Ошибка при загрузке пользователей');
        } finally {
            setLoading(false);
        }
    };

    const handleRoleChange = async (userId: string, newRole: string) => {
        try {
            const response = await fetch(`/api/admin/users/${userId}/role`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ role: newRole }),
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'Failed to update role');
            }

            setUsers(users.map(user =>
                user.id === userId
                    ? { ...user, role: newRole as 'USER' | 'EDITOR' | 'ADMIN' }
                    : user
            ));
            setEditingUser(null);
            setSuccess('Роль успешно обновлена');
            setTimeout(() => setSuccess(null), 3000);
        } catch (error) {
            console.error('Error updating role:', error);
            setError(error instanceof Error ? error.message : 'Ошибка при обновлении роли');
            setTimeout(() => setError(null), 3000);
        }
    };

    const getRoleBadgeClass = (role: string) => {
        switch (role) {
            case 'ADMIN':
                return 'bg-red-100 text-red-800';
            case 'EDITOR':
                return 'bg-blue-100 text-blue-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };

    const getRoleLabel = (role: string) => {
        switch (role) {
            case 'ADMIN':
                return 'Администратор';
            case 'EDITOR':
                return 'Редактор';
            default:
                return 'Пользователь';
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-[400px]">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="max-w-6xl mx-auto py-8 px-4">
            <div className="mb-8">
                <div className="flex items-center gap-2 mb-2">
                    <Shield className="h-6 w-6"/>
                    <h1 className="text-2xl font-bold">Управление пользователями</h1>
                </div>
                <p className="text-muted-foreground">
                    Управление ролями пользователей в системе
                </p>
            </div>

            {error && (
                <div className="mb-4 p-4 bg-red-50 text-red-800 rounded-md">
                    {error}
                </div>
            )}

            {success && (
                <div className="mb-4 p-4 bg-green-50 text-green-800 rounded-md">
                    {success}
                </div>
            )}

            <div className="bg-card border rounded-lg overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead className="bg-muted">
                        <tr>
                            <th className="px-6 py-3 text-left text-sm font-medium">Пользователь</th>
                            <th className="px-6 py-3 text-left text-sm font-medium">Email</th>
                            <th className="px-6 py-3 text-left text-sm font-medium">Роль</th>
                            <th className="px-6 py-3 text-left text-sm font-medium">Действия</th>
                        </tr>
                        </thead>
                        <tbody className="divide-y divide-border">
                        {users.map((user) => (
                            <tr key={user.id} className="hover:bg-muted/50">
                                <td className="px-6 py-4">
                                    <div className="flex items-center gap-3">
                                        <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                                            {user.avatar ? (
                                                <Image
                                                    src={user.avatar}
                                                    alt=""
                                                    width={40}
                                                    height={40}
                                                    className="rounded-full object-cover"
                                                />
                                            ) : (
                                                <UserIcon className="h-5 w-5 text-primary" />
                                            )}
                                        </div>
                                        <div>
                                            <div className="font-medium">{user.firstName} {user.lastName}</div>
                                            <div className="text-sm text-muted-foreground">
                                                Создан: {new Date(user.createdAt).toLocaleDateString()}
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td className="px-6 py-4">
                                    <span className="text-sm">{user.email}</span>
                                </td>
                                <td className="px-6 py-4">
                                    {editingUser === user.id ? (
                                        <select
                                            className="rounded-md border px-3 py-1 text-sm"
                                            value={user.role}
                                            onChange={(e) => handleRoleChange(user.id, e.target.value)}
                                            autoFocus
                                            onBlur={() => setEditingUser(null)}
                                        >
                                            <option value="USER">Пользователь</option>
                                            <option value="EDITOR">Редактор</option>
                                            <option value="ADMIN">Администратор</option>
                                        </select>
                                    ) : (
                                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleBadgeClass(user.role)}`}>
                                                {getRoleLabel(user.role)}
                                            </span>
                                    )}
                                </td>
                                <td className="px-6 py-4">
                                    <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => setEditingUser(user.id)}
                                        className="flex items-center gap-2"
                                    >
                                        <Pencil className="h-4 w-4" />
                                        Изменить роль
                                    </Button>
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
}

// File: app\api\admin\users\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';
export const dynamic = 'force-dynamic';

export async function GET() {
    try {
        const user = await getAuthUser();
        if (!user || user.role !== 'ADMIN') {
            return NextResponse.json(
                { error: 'Доступ запрещен' },
                { status: 403 }
            );
        }

        const users = await prisma.user.findMany({
            orderBy: {
                createdAt: 'desc'
            },
            select: {
                id: true,
                email: true,
                firstName: true,
                lastName: true,
                role: true,
                avatar: true,
                createdAt: true,
                isVerified: true,
            }
        });

        return NextResponse.json({ users });
    } catch (error) {
        console.error('Error fetching users:', error);
        return NextResponse.json(
            { error: 'Внутренняя ошибка сервера' },
            { status: 500 }
        );
    }
}

// File: app\api\admin\users\[id]\role\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function PUT(
    request: Request,
    { params }: { params: { id: string } }
) {
    try {
        const user = await getAuthUser();
        if (!user || user.role !== 'ADMIN') {
            return NextResponse.json(
                { error: 'Доступ запрещен' },
                { status: 403 }
            );
        }

        const { role } = await request.json();

        // Проверяем, что роль допустима
        if (!['USER', 'EDITOR', 'ADMIN'].includes(role)) {
            return NextResponse.json(
                { error: 'Недопустимая роль' },
                { status: 400 }
            );
        }

        // Запрещаем администратору менять свою роль
        if (params.id === user.id) {
            return NextResponse.json(
                { error: 'Нельзя изменить свою роль' },
                { status: 400 }
            );
        }

        // Обновляем роль пользователя
        const updatedUser = await prisma.user.update({
            where: { id: params.id },
            data: { role: role as 'USER' | 'EDITOR' | 'ADMIN' },
            select: {
                id: true,
                email: true,
                firstName: true,
                lastName: true,
                role: true,
                avatar: true,
                createdAt: true,
                isVerified: true,
            }
        });

        return NextResponse.json({ user: updatedUser });
    } catch (error) {
        console.error('Error updating user role:', error);
        return NextResponse.json(
            { error: 'Внутренняя ошибка сервера' },
            { status: 500 }
        );
    }
}

// File: app\api\auth\login\route.ts
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';
export const dynamic = 'force-dynamic';

export async function POST(request: Request) {
    try {
        const { email, password } = await request.json();

        const user = await prisma.user.findUnique({ where: { email } });
        if (!user) {
            return NextResponse.json(
                { error: 'Неверный email или пароль' },
                { status: 401 }
            );
        }

        const isValidPassword = await bcrypt.compare(password, user.password);
        if (!isValidPassword) {
            return NextResponse.json(
                { error: 'Неверный email или пароль' },
                { status: 401 }
            );
        }

        const token = jwt.sign(
            { userId: user.id, role: user.role },
            process.env.JWT_SECRET!,
            { expiresIn: '1d' }
        );

        const refreshToken = jwt.sign(
            { userId: user.id },
            process.env.REFRESH_TOKEN_SECRET!,
            { expiresIn: '7d' }
        );

        await prisma.refreshToken.create({
            data: {
                token: refreshToken,
                userId: user.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            },
        });

        cookies().set('auth-token', token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 60 * 60 * 24, // 1 день
        });

        cookies().set('refresh-token', refreshToken, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 60 * 60 * 24 * 7, // 7 дней
        });

        const { password: _, ...userWithoutPassword } = user;
        return NextResponse.json({ user: userWithoutPassword });
    } catch (error: unknown) {
        console.error('Login error:', error);
        return NextResponse.json(
            { error: 'Внутренняя ошибка сервера' },
            { status: 500 }
        );
    }
}

// File: app\api\auth\logout\route.ts
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
export const dynamic = 'force-dynamic';

export async function POST() {
    try {
        const refreshToken = cookies().get('refresh-token')?.value;

        if (refreshToken) {
            await prisma.refreshToken.deleteMany({
                where: { token: refreshToken },
            });
        }

        cookies().delete('auth-token');
        cookies().delete('refresh-token');

        return NextResponse.json({ success: true });
    } catch (error: unknown) {
        console.error('Error:', error);
        return NextResponse.json(
            { error: 'Внутренняя ошибка сервера' },
            { status: 500 }
        );
    }
}

// File: app\api\auth\me\route.ts
import { getAuthUser } from '@/lib/auth';
import { NextResponse } from 'next/server';
export const dynamic = 'force-dynamic';

export async function GET(_request: Request) {
    try {
        const user = await getAuthUser();

        if (!user) {
            return NextResponse.json({ error: 'Не авторизован' }, { status: 401 });
        }

        const { password: _, ...userWithoutPassword } = user;
        return NextResponse.json({ user: userWithoutPassword });
    } catch (error: unknown) {
        console.error('Error:', error);
        return NextResponse.json(
            { error: 'Внутренняя ошибка сервера' },
            { status: 500 }
        );
    }
}

// File: app\api\auth\register\route.ts
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';
import bcrypt from 'bcryptjs';

export async function POST(request: Request) {
    try {
        const { email, password, firstName, lastName } = await request.json();

        const existingUser = await prisma.user.findUnique({
            where: { email }
        });

        if (existingUser) {
            return NextResponse.json(
                { error: 'Пользователь с таким email уже существует' },
                { status: 400 }
            );
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const user = await prisma.user.create({
            data: {
                email,
                password: hashedPassword,
                firstName,
                lastName,
                role: 'USER'
            }
        });

        const { password: _, ...userWithoutPassword } = user;

        return NextResponse.json({ user: userWithoutPassword });
    } catch (error: unknown) {
        console.error('Registration error:', error);
        return NextResponse.json(
            { error: 'Ошибка при регистрации' },
            { status: 500 }
        );
    }

}

// File: app\api\bookings\create\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
    try {
        const user = await getAuthUser();
        if (!user) {
            return NextResponse.json({ error: 'Не авторизован' }, { status: 401 });
        }

        const { carId, startDate, endDate, extras, totalPrice } = await request.json();

        // Проверяем, существует ли автомобиль
        const car = await prisma.car.findUnique({
            where: { id: carId }
        });

        if (!car) {
            return NextResponse.json(
                { error: 'Автомобиль не найден' },
                { status: 404 }
            );
        }

        // Проверяем, не забронирован ли автомобиль на эти даты
        const existingBooking = await prisma.booking.findFirst({
            where: {
                carId,
                status: { in: ['PENDING', 'CONFIRMED', 'IN_PROGRESS'] },
                OR: [
                    {
                        AND: [
                            { startDate: { lte: new Date(startDate) } },
                            { endDate: { gte: new Date(startDate) } },
                        ],
                    },
                    {
                        AND: [
                            { startDate: { lte: new Date(endDate) } },
                            { endDate: { gte: new Date(endDate) } },
                        ],
                    },
                ],
            },
        });

        if (existingBooking) {
            return NextResponse.json(
                { error: 'Автомобиль уже забронирован на выбранные даты' },
                { status: 400 }
            );
        }

        // Создаем бронирование
        const booking = await prisma.$transaction(async (prisma) => {
            // Создаем основную запись бронирования
            const newBooking = await prisma.booking.create({
                data: {
                    carId,
                    userId: user.id,
                    startDate: new Date(startDate),
                    endDate: new Date(endDate),
                    totalPrice,
                    status: 'PENDING'
                }
            });

            // Создаем запись о дополнительных услугах
            await prisma.bookingExtras.create({
                data: {
                    bookingId: newBooking.id,
                    insurance: extras.insurance || false,
                    gps: extras.gps || false,
                    childSeat: extras.childSeat || false,
                    additionalDriver: extras.additionalDriver || false
                }
            });

            // Возвращаем бронирование со всеми связанными данными
            return prisma.booking.findUnique({
                where: { id: newBooking.id },
                include: {
                    car: true,
                    extras: true
                }
            });
        });

        return NextResponse.json({ booking });
    } catch (error) {
        console.error('Error creating booking:', error);
        return NextResponse.json(
            { error: 'Ошибка при создании бронирования' },
            { status: 500 }
        );
    }
}

// File: app\api\bookings\user\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function GET() {
    try {
        const user = await getAuthUser();
        if (!user) {
            return NextResponse.json({ error: 'Не авторизован' }, { status: 401 });
        }

        const bookings = await prisma.booking.findMany({
            where: { userId: user.id },
            include: {
                car: {
                    select: {
                        make: true,
                        model: true,
                        year: true,
                        images: true,
                        specifications: true,
                    },
                },
                extras: true,
            },
            orderBy: { createdAt: 'desc' },
        });

        return NextResponse.json({ bookings });
    } catch (_error) {
        return NextResponse.json(
            { error: 'Внутренняя ошибка сервера' },
            { status: 500 }
        );
    }
}

// File: app\api\bookings\[id]\cancel\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

interface RouteContext {
    params: { id: string }
}

export async function POST(request: Request, context: RouteContext) {
    try {
        const user = await getAuthUser();
        if (!user) {
            return NextResponse.json({ error: 'Не авторизован' }, { status: 401 });
        }

        const booking = await prisma.booking.findUnique({
            where: { id: context.params.id },
        });

        if (!booking) {
            return NextResponse.json(
                { error: 'Бронирование не найдено' },
                { status: 404 }
            );
        }

        if (booking.userId !== user.id) {
            return NextResponse.json(
                { error: 'Нет прав для отмены бронирования' },
                { status: 403 }
            );
        }

        const updatedBooking = await prisma.booking.update({
            where: { id: booking.id },
            data: { status: 'CANCELLED' },
        });

        return NextResponse.json({ booking: updatedBooking });
    } catch (_error) {
        return NextResponse.json(
            { error: 'Внутренняя ошибка сервера' },
            { status: 500 }
        );
    }
}

// File: app\api\cars\route.ts

import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';
import {handleDatabaseError} from "@/lib/middleware/errorHandler";
import {Car} from "@/lib/types/car";

interface PaginationResponse {
    cars: Car[];
    pagination: {
        total: number;
        pages: number;
        currentPage: number;
        limit: number;
    }
}

export async function GET(request: Request) {
    try {
        const { searchParams } = new URL(request.url);
        const page = parseInt(searchParams.get('page') || '1');
        const limit = parseInt(searchParams.get('limit') || '9');
        const skip = (page - 1) * limit;

        const total = await prisma.car.count();

        const rawCars = await prisma.car.findMany({
            include: {
                specifications: true
            },
            orderBy: {
                createdAt: 'desc'
            },
            skip,
            take: limit,
        });

        // Преобразуем Decimal в number
        const cars: Car[] = rawCars.map(car => ({
            ...car,
            pricePerDay: Number(car.pricePerDay),
            createdAt: new Date(car.createdAt),
            updatedAt: new Date(car.updatedAt)
        }));

        const response: PaginationResponse = {
            cars,
            pagination: {
                total,
                pages: Math.ceil(total / limit),
                currentPage: page,
                limit
            }
        };

        return NextResponse.json(response);
    } catch (error) {
        return handleDatabaseError(error);
    }
}



// File: app\api\cars\[id]\route.ts
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function GET(
    request: Request,
    { params }: { params: { id: string } }
) {
    try {
        const car = await prisma.car.findUnique({
            where: { id: params.id },
            include: {
                specifications: true
            }
        });

        if (!car) {
            return NextResponse.json(
                { error: 'Автомобиль не найден' },
                { status: 404 }
            );
        }

        return NextResponse.json(car);
    } catch (error) {
        console.error('Error fetching car:', error);
        return NextResponse.json(
            { error: 'Ошибка при получении данных автомобиля' },
            { status: 500 }
        );
    }
}

// File: app\api\cars\[id]\booked-dates\route.ts
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function GET(
    request: Request,
    { params }: { params: { id: string } }
) {
    try {
        // Получаем все подтвержденные бронирования
        const bookings = await prisma.booking.findMany({
            where: {
                carId: params.id,
                status: {
                    in: ['CONFIRMED', 'IN_PROGRESS'] // Учитываем только подтвержденные и активные бронирования
                }
            },
            select: {
                startDate: true,
                endDate: true
            }
        });

        // Форматируем даты для возврата
        const bookedDates = bookings.map(booking => ({
            startDate: booking.startDate.toISOString(),
            endDate: booking.endDate.toISOString()
        }));

        return NextResponse.json({ bookedDates });
    } catch (error) {
        console.error('Error fetching booked dates:', error);
        return NextResponse.json(
            { error: 'Ошибка при получении дат бронирования' },
            { status: 500 }
        );
    }
}

// File: app\api\editor\bookings\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';
export const dynamic = 'force-dynamic';

export async function GET() {
    try {
        const user = await getAuthUser();

        if (!user || !['ADMIN', 'EDITOR'].includes(user.role)) {
            return NextResponse.json(
                { error: 'Нет доступа' },
                { status: 403 }
            );
        }

        const bookings = await prisma.booking.findMany({
            include: {
                car: {
                    select: {
                        id: true,
                        make: true,
                        model: true,
                        year: true,
                        images: true,
                        specifications: true,
                    }
                },
                user: {
                    select: {
                        id: true,
                        firstName: true,
                        lastName: true,
                        email: true,
                        avatar: true,
                    }
                },
                extras: true,
            },
            orderBy: {
                createdAt: 'desc'
            }
        });

        return NextResponse.json({ bookings });
    } catch (error) {
        console.error('Error fetching bookings:', error);
        return NextResponse.json(
            { error: 'Ошибка при получении бронирований' },
            { status: 500 }
        );
    }
}

// File: app\api\editor\bookings\[id]\status\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function PUT(
    request: Request,
    { params }: { params: { id: string } }
) {
    try {
        const user = await getAuthUser();

        if (!user || !['ADMIN', 'EDITOR'].includes(user.role)) {
            return NextResponse.json(
                { error: 'Нет доступа' },
                { status: 403 }
            );
        }

        const { status } = await request.json();

        // Проверяем существование бронирования
        const booking = await prisma.booking.findUnique({
            where: { id: params.id }
        });

        if (!booking) {
            return NextResponse.json(
                { error: 'Бронирование не найдено' },
                { status: 404 }
            );
        }

        // Обновляем статус
        const updatedBooking = await prisma.booking.update({
            where: { id: params.id },
            data: { status },
            include: {
                car: true,
                user: true
            }
        });

        return NextResponse.json({ booking: updatedBooking });
    } catch (error) {
        console.error('Error updating booking status:', error);
        return NextResponse.json(
            { error: 'Ошибка при обновлении статуса' },
            { status: 500 }
        );
    }
}

// File: app\api\editor\cars\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

export async function POST(request: Request) {
    try {
        const user = await getAuthUser();

        if (!user || !['ADMIN', 'EDITOR'].includes(user.role)) {
            return NextResponse.json(
                { error: 'Нет доступа' },
                { status: 403 }
            );
        }

        const data = await request.json();

        // Создаем автомобиль
        const car = await prisma.car.create({
            data: {
                make: data.make,
                model: data.model,
                year: data.year,
                pricePerDay: data.pricePerDay,
                type: data.type,
                features: data.features || [],
                images: data.images || [],
                description: data.description || '',
                createdBy: user.id,
                lastModifiedBy: user.id,
                availability: true,
                specifications: {
                    create: {
                        transmission: data.specifications.transmission,
                        fuelType: data.specifications.fuelType,
                        seats: data.specifications.seats,
                        luggage: data.specifications.luggage
                    }
                }
            },
            include: {
                specifications: true
            }
        });

        return NextResponse.json({ car });
    } catch (error) {
        console.error('Error creating car:', error);
        return NextResponse.json(
            { error: 'Ошибка при создании автомобиля' },
            { status: 500 }
        );
    }
}

// File: app\api\editor\cars\[id]\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function PUT(
    request: Request,
    { params }: { params: { id: string } }
) {
    try {
        const user = await getAuthUser();

        if (!user || !['ADMIN', 'EDITOR'].includes(user.role)) {
            return NextResponse.json(
                { error: 'Нет доступа' },
                { status: 403 }
            );
        }

        const data = await request.json();

        // Проверяем существование автомобиля
        const existingCar = await prisma.car.findUnique({
            where: { id: params.id }
        });

        if (!existingCar) {
            return NextResponse.json(
                { error: 'Автомобиль не найден' },
                { status: 404 }
            );
        }

        // Обновляем данные автомобиля
        const car = await prisma.car.update({
            where: { id: params.id },
            data: {
                make: data.make,
                model: data.model,
                year: data.year,
                type: data.type,
                pricePerDay: data.pricePerDay,
                description: data.description,
                features: data.features,
                images: data.images,
                lastModifiedBy: user.id,
                specifications: {
                    update: {
                        transmission: data.specifications.transmission,
                        fuelType: data.specifications.fuelType,
                        seats: data.specifications.seats,
                        luggage: data.specifications.luggage
                    }
                }
            },
            include: {
                specifications: true
            }
        });

        return NextResponse.json({ car });
    } catch (error) {
        console.error('Error updating car:', error);
        return NextResponse.json(
            { error: 'Ошибка при обновлении автомобиля' },
            { status: 500 }
        );
    }
}

export async function DELETE(
    request: Request,
    { params }: { params: { id: string } }
) {
    try {
        const user = await getAuthUser();

        if (!user || !['ADMIN', 'EDITOR'].includes(user.role)) {
            return NextResponse.json(
                { error: 'Нет доступа' },
                { status: 403 }
            );
        }

        await prisma.car.delete({
            where: { id: params.id }
        });

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error('Error deleting car:', error);
        return NextResponse.json(
            { error: 'Ошибка при удалении автомобиля' },
            { status: 500 }
        );
    }
}

// File: app\api\editor\upload\route.ts
import { getAuthUser } from '@/lib/auth';
import { NextResponse } from 'next/server';
import { writeFile } from 'fs/promises';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

export async function POST(request: Request) {
    try {
        // Проверяем авторизацию
        const user = await getAuthUser();
        if (!user || !['ADMIN', 'EDITOR'].includes(user.role)) {
            return NextResponse.json(
                { error: 'Нет доступа' },
                { status: 403 }
            );
        }

        const formData = await request.formData();
        const file = formData.get('file') as File;

        if (!file) {
            return NextResponse.json(
                { error: 'Файл не найден' },
                { status: 400 }
            );
        }

        // Проверяем тип файла
        if (!file.type.startsWith('image/')) {
            return NextResponse.json(
                { error: 'Разрешены только изображения' },
                { status: 400 }
            );
        }

        const buffer = Buffer.from(await file.arrayBuffer());

        // Создаем уникальное имя файла
        const uniqueId = uuidv4();
        const fileExtension = path.extname(file.name).toLowerCase();
        const fileName = `${uniqueId}${fileExtension}`;

        // Убедимся, что папка существует
        const uploadDir = path.join(process.cwd(), 'public', 'uploads');
        try {
            await writeFile(path.join(uploadDir, fileName), buffer);
        } catch (error) {
            console.error('Error writing file:', error);
            return NextResponse.json(
                { error: 'Ошибка при сохранении файла' },
                { status: 500 }
            );
        }

        // Возвращаем URL файла
        return NextResponse.json({
            url: `/uploads/${fileName}`
        });

    } catch (error) {
        console.error('Error handling upload:', error);
        return NextResponse.json(
            { error: 'Ошибка при загрузке файла' },
            { status: 500 }
        );
    }
}

// File: app\api\profile\avatar\route.ts
import { getAuthUser } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import { writeFile } from 'fs/promises';
import { NextResponse } from 'next/server';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

export async function POST(request: Request) {
    try {
        const user = await getAuthUser();
        if (!user) {
            return NextResponse.json({ error: 'Не авторизован' }, { status: 401 });
        }

        const formData = await request.formData();
        const file = formData.get('file') as File;

        if (!file) {
            return NextResponse.json(
                { error: 'Файл не найден' },
                { status: 400 }
            );
        }

        // Проверяем тип файла
        if (!file.type.startsWith('image/')) {
            return NextResponse.json(
                { error: 'Разрешены только изображения' },
                { status: 400 }
            );
        }

        const buffer = Buffer.from(await file.arrayBuffer());

        // Создаем уникальное имя файла
        const uniqueId = uuidv4();
        const fileExtension = path.extname(file.name).toLowerCase();
        const fileName = `avatar-${uniqueId}${fileExtension}`;

        // Убедимся, что папка существует
        const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'avatars');
        try {
            await writeFile(path.join(uploadDir, fileName), buffer);
        } catch (error) {
            console.error('Error writing file:', error);
            return NextResponse.json(
                { error: 'Ошибка при сохранении файла' },
                { status: 500 }
            );
        }

        // Обновляем аватар пользователя в базе данных
        const avatarUrl = `/uploads/avatars/${fileName}`;
        await prisma.user.update({
            where: { id: user.id },
            data: { avatar: avatarUrl },
        });

        return NextResponse.json({ url: avatarUrl });
    } catch (error) {
        console.error('Error handling upload:', error);
        return NextResponse.json(
            { error: 'Ошибка при загрузке файла' },
            { status: 500 }
        );
    }
}

// File: app\api\profile\update\route.ts
import {getAuthUser} from '@/lib/auth';
import {prisma} from '@/lib/prisma';
import {NextResponse} from 'next/server';
import bcrypt from 'bcryptjs';


interface UpdateData {
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
}


export async function PUT(request: Request) {
    try {
        const user = await getAuthUser();
        if (!user) {
            return NextResponse.json({error: 'Не авторизован'}, {status: 401});
        }

        const {firstName, lastName, email, currentPassword, newPassword} = await request.json();

        if (email !== user.email) {
            const existingUser = await prisma.user.findUnique({
                where: {email},
            });
            if (existingUser) {
                return NextResponse.json(
                    {error: 'Email уже используется'},
                    {status: 400}
                );
            }
        }

        const updateData: UpdateData = {
            firstName,
            lastName,
            email,
        };

        if (newPassword) {
            const isValidPassword = await bcrypt.compare(currentPassword, user.password);
            if (!isValidPassword) {
                return NextResponse.json(
                    {error: 'Неверный текущий пароль'},
                    {status: 400}
                );
            }

            updateData.password = await bcrypt.hash(newPassword, 10);
        }

        const updatedUser = await prisma.user.update({
            where: {id: user.id},
            data: updateData,
        });

        const {password: _, ...userWithoutPassword} = updatedUser;
        return NextResponse.json({user: userWithoutPassword});
    } catch (error) {
        console.error('Error updating profile:', error);
        return NextResponse.json(
            {error: 'Внутренняя ошибка сервера'},
            {status: 500}
        );
    }
}

// File: app\cars\page.tsx
// app/cars/page.tsx
import { CarsContainer } from "@/components/cars/CarsContainer";

export default function CarsPage() {
    return (
        <div className="space-y-8 py-6">
            <div className="space-y-4">
                <h1 className="text-4xl font-bold">Найдите свой идеальный автомобиль</h1>
                <p className="text-lg text-muted-foreground">
                    Выбирайте из нашей коллекции премиальных автомобилей для любых целей
                </p>
            </div>

            <CarsContainer />
        </div>
    );
}

// File: app\cars\[id]\page.tsx
'use client';

import Image from 'next/image';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Car, Calendar, Fuel, Users } from 'lucide-react';
import MainBookingForm from "@/components/cars/MainBookingForm";

interface CarDetails {
    id: string;
    make: string;
    model: string;
    year: number;
    type: string;
    pricePerDay: number;
    features: string[];
    description: string | null;
    images: string[];
    specifications: {
        transmission: string | null;
        fuelType: string | null;
        seats: number | null;
        luggage: number | null;
    } | null;
}

export default function CarDetailsPage({ params }: { params: { id: string } }) {
    const [car, setCar] = useState<CarDetails | null>(null);
    const [loading, setLoading] = useState(true);
    const [selectedImage, setSelectedImage] = useState<string | null>(null);
    const router = useRouter();

    useEffect(() => {
        const fetchCar = async () => {
            try {
                const response = await fetch(`/api/cars/${params.id}`);
                if (response.ok) {
                    const data = await response.json();
                    setCar({
                        ...data,
                        pricePerDay: Number(data.pricePerDay)
                    });
                    if (data.images.length > 0) {
                        setSelectedImage(data.images[0]);
                    }
                } else {
                    router.push('/cars');
                }
            } catch (error) {
                console.error('Error fetching car:', error);
                router.push('/cars');
            } finally {
                setLoading(false);
            }
        };

        fetchCar();
    }, [params.id, router]);

    if (loading || !car) {
        return (
            <div className="flex justify-center items-center min-h-[400px]">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="max-w-7xl mx-auto py-8">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Left Column - Images and Info */}
                <div className="lg:col-span-2 space-y-6">
                    {/* Main Image */}
                    <div className="aspect-video bg-muted rounded-lg overflow-hidden">
                        {selectedImage ? (
                            <Image
                                src={selectedImage}
                                alt={`${car.make} ${car.model}`}
                                className="w-full h-full object-cover"
                            />
                        ) : (
                            <div className="w-full h-full flex items-center justify-center">
                                <Car className="h-20 w-20 text-muted-foreground" />
                            </div>
                        )}
                    </div>

                    {/* Thumbnails */}
                    {car.images.length > 1 && (
                        <div className="grid grid-cols-4 gap-4">
                            {car.images.map((image, index) => (
                                <button
                                    key={index}
                                    className={`aspect-square rounded-lg overflow-hidden border-2 ${
                                        selectedImage === image ? 'border-primary' : 'border-transparent'
                                    }`}
                                    onClick={() => setSelectedImage(image)}
                                >
                                    <Image
                                        src={image}
                                        alt={`${car.make} ${car.model} view ${index + 1}`}
                                        className="w-full h-full object-cover"
                                    />
                                </button>
                            ))}
                        </div>
                    )}

                    {/* Car Details */}
                    <div className="space-y-6">
                        <div>
                            <h1 className="text-3xl font-bold">
                                {car.make} {car.model} {car.year}
                            </h1>
                            <p className="text-lg text-muted-foreground">{car.type}</p>
                        </div>

                        {/* Specifications */}
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            {car.specifications?.transmission && (
                                <div className="flex flex-col items-center p-4 bg-secondary rounded-lg">
                                    <Car className="h-6 w-6 mb-2" />
                                    <p className="text-sm font-medium">{car.specifications.transmission}</p>
                                    <p className="text-xs text-muted-foreground">Трансмиссия</p>
                                </div>
                            )}
                            {car.specifications?.fuelType && (
                                <div className="flex flex-col items-center p-4 bg-secondary rounded-lg">
                                    <Fuel className="h-6 w-6 mb-2" />
                                    <p className="text-sm font-medium">{car.specifications.fuelType}</p>
                                    <p className="text-xs text-muted-foreground">Топливо</p>
                                </div>
                            )}
                            {car.specifications?.seats && (
                                <div className="flex flex-col items-center p-4 bg-secondary rounded-lg">
                                    <Users className="h-6 w-6 mb-2" />
                                    <p className="text-sm font-medium">{car.specifications.seats} мест</p>
                                    <p className="text-xs text-muted-foreground">Вместимость</p>
                                </div>
                            )}
                            {car.specifications?.luggage && (
                                <div className="flex flex-col items-center p-4 bg-secondary rounded-lg">
                                    <Calendar className="h-6 w-6 mb-2" />
                                    <p className="text-sm font-medium">{car.specifications.luggage}л</p>
                                    <p className="text-xs text-muted-foreground">Багажник</p>
                                </div>
                            )}
                        </div>

                        {/* Features */}
                        <div>
                            <h2 className="text-xl font-semibold mb-4">Особенности</h2>
                            <div className="flex flex-wrap gap-2">
                                {car.features.map((feature) => (
                                    <span
                                        key={feature}
                                        className="px-3 py-1 bg-secondary rounded-full text-sm"
                                    >
                                        {feature}
                                    </span>
                                ))}
                            </div>
                        </div>

                        {/* Description */}
                        {car.description && (
                            <div>
                                <h2 className="text-xl font-semibold mb-4">Описание</h2>
                                <div className="prose max-w-none">
                                    <p className="text-muted-foreground">{car.description}</p>
                                </div>
                            </div>
                        )}
                    </div>
                </div>

                {/* Right Column - Booking Form */}
                <div className="lg:col-span-1">
                    <MainBookingForm carId={car.id} pricePerDay={car.pricePerDay} />
                </div>
            </div>
        </div>
    );
}

// File: app\contact\page.tsx
import { Phone, Mail, MapPin, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";

const contactInfo = [
    {
        icon: Phone,
        title: "Телефон",
        details: ["+7 (999) 123-45-67", "+7 (999) 765-43-21"],
        action: "tel:+79991234567"
    },
    {
        icon: Mail,
        title: "Email",
        details: ["info@rentcar.ru", "support@rentcar.ru"],
        action: "mailto:info@rentcar.ru"
    },
    {
        icon: MapPin,
        title: "Адрес",
        details: ["ул. Примерная, 123", "Москва, Россия"],
        action: "https://maps.google.com"
    },
    {
        icon: Clock,
        title: "Режим работы",
        details: ["Пн-Пт: 9:00 - 20:00", "Сб-Вс: 10:00 - 18:00"],
    }
];

export default function ContactPage() {
    return (
        <div className="py-12">
            {/* Hero Section */}
            <div className="text-center mb-16">
                <h1 className="text-4xl font-bold mb-4">Свяжитесь с нами</h1>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                    Мы всегда готовы ответить на ваши вопросы и помочь с выбором автомобиля
                </p>
            </div>

            {/* Contact Information */}
            <div className="max-w-6xl mx-auto px-4 mb-20">
                <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
                    {contactInfo.map((item, index) => (
                        <div key={index} className="text-center space-y-4">
                            <div className="w-16 h-16 mx-auto bg-primary/10 rounded-full flex items-center justify-center">
                                <item.icon className="w-8 h-8 text-primary" />
                            </div>
                            <h3 className="text-xl font-semibold">{item.title}</h3>
                            <div className="space-y-1">
                                {item.details.map((detail, idx) => (
                                    <p key={idx} className="text-muted-foreground">{detail}</p>
                                ))}
                            </div>
                            {item.action && (
                                <a href={item.action} className="block">
                                    <Button variant="outline" className="w-full">
                                        {item.title === "Телефон" ? "Позвонить" :
                                            item.title === "Email" ? "Написать" :
                                                "Показать на карте"}
                                    </Button>
                                </a>
                            )}
                        </div>
                    ))}
                </div>
            </div>

            {/* Contact Form */}
            <div className="max-w-2xl mx-auto px-4">
                <div className="bg-card border rounded-lg p-8">
                    <h2 className="text-2xl font-bold mb-6 text-center">Отправить сообщение</h2>
                    <form className="space-y-6">
                        <div className="grid md:grid-cols-2 gap-6">
                            <div>
                                <label className="block text-sm font-medium mb-2">Имя</label>
                                <input
                                    type="text"
                                    className="w-full rounded-md border px-3 py-2"
                                    placeholder="Введите ваше имя"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium mb-2">Email</label>
                                <input
                                    type="email"
                                    className="w-full rounded-md border px-3 py-2"
                                    placeholder="Введите ваш email"
                                />
                            </div>
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Тема</label>
                            <input
                                type="text"
                                className="w-full rounded-md border px-3 py-2"
                                placeholder="Укажите тему сообщения"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Сообщение</label>
                            <textarea
                                className="w-full rounded-md border px-3 py-2 h-32 resize-none"
                                placeholder="Введите ваше сообщение"
                            />
                        </div>
                        <Button className="w-full">Отправить сообщение</Button>
                    </form>
                </div>
            </div>

            {/* Map Section */}
            <div className="max-w-6xl mx-auto px-4 mt-20">
                <div className="aspect-[21/9] bg-muted rounded-lg flex items-center justify-center">
                    <p className="text-muted-foreground">Здесь будет карта</p>
                </div>
            </div>
        </div>
    );
}

// File: app\dashboard\page.tsx
// app/dashboard/page.tsx
'use client';

import Image from 'next/image';
import { useEffect, useState, useCallback } from 'react';
import {CarFront, Calendar, Info} from 'lucide-react';
import { Button } from "@/components/ui/button";
import { formatPrice } from '@/lib/utils/format';

interface BookingExtras {
    insurance: boolean;
    gps: boolean;
    childSeat: boolean;
    additionalDriver: boolean;
}

interface Booking {
    id: string;
    car: {
        make: string;
        model: string;
        year: number;
        images: string[];
        specifications: {
            transmission: string | null;
            fuelType: string | null;
            seats: number | null;
        } | null;
    };
    startDate: string;
    endDate: string;
    totalPrice: number;
    status: 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';
    extras: BookingExtras;
}

export default function DashboardPage() {
    const [bookings, setBookings] = useState<Booking[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [cancelLoading, setCancelLoading] = useState<string | null>(null);

    const fetchBookings = useCallback(async () => {
        try {
            const response = await fetch('/api/bookings/user');
            if (response.ok) {
                const data = await response.json();
                setBookings(data.bookings);
            }
        } catch (error) {
            setError('Ошибка при загрузке бронирований');
            console.error('Error fetching bookings:', error);
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchBookings();
    }, [fetchBookings]);

    const handleCancelBooking = async (bookingId: string) => {
        if (!confirm('Вы уверены, что хотите отменить бронирование?')) {
            return;
        }

        setCancelLoading(bookingId);
        try {
            const response = await fetch(`/api/bookings/${bookingId}/cancel`, {
                method: 'POST',
            });

            if (response.ok) {
                setBookings(bookings.map(booking =>
                    booking.id === bookingId
                        ? { ...booking, status: 'CANCELLED' }
                        : booking
                ));
            } else {
                const data = await response.json();
                throw new Error(data.error || 'Ошибка при отмене бронирования');
            }
        } catch (error) {
            console.error('Error cancelling booking:', error);
            setError(error instanceof Error ? error.message : 'Произошла ошибка при отмене бронирования');
        } finally {
            setCancelLoading(null);
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-[400px]">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="max-w-6xl mx-auto py-12">
            <div className="space-y-8">
                <div>
                    <h1 className="text-2xl font-bold">Мои бронирования</h1>
                    <p className="text-muted-foreground">
                        Управляйте своими бронированиями и просматривайте историю аренд
                    </p>
                </div>

                {error && (
                    <div className="bg-destructive/10 text-destructive px-4 py-3 rounded-md">
                        {error}
                    </div>
                )}

                {bookings.length === 0 ? (
                    <div className="text-center py-12 bg-card border rounded-lg">
                        <CarFront className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                        <h2 className="text-xl font-semibold mb-2">У вас пока нет аренд</h2>
                        <p className="text-muted-foreground mb-4">
                            Начните с выбора автомобиля из нашего каталога
                        </p>
                        <a href="/cars">
                            <Button>Выбрать автомобиль</Button>
                        </a>
                    </div>
                ) : (
                    <div className="grid gap-6">
                        {bookings.map((booking) => (
                            <div
                                key={booking.id}
                                className="bg-card border rounded-lg p-6"
                            >
                                <div className="flex flex-col md:flex-row gap-6">
                                    {/* Car Image */}
                                    <div className="w-full md:w-48 h-32 bg-muted rounded-lg overflow-hidden">
                                        {booking.car.images[0] ? (
                                            <Image
                                                src={booking.car.images[0]}
                                                alt={`${booking.car.make} ${booking.car.model}`}
                                                // fill={true}
                                                className="w-full h-full object-cover"
                                            />
                                        ) : (
                                            <div className="w-full h-full flex items-center justify-center">
                                                <CarFront className="h-12 w-12 text-muted-foreground" />
                                            </div>
                                        )}
                                    </div>

                                    {/* Booking Details */}
                                    <div className="flex-grow space-y-4">
                                        <div className="flex justify-between items-start">
                                            <div>
                                                <h3 className="text-lg font-semibold">
                                                    {booking.car.make} {booking.car.model} {booking.car.year}
                                                </h3>
                                                <div className="flex flex-wrap gap-4 text-sm text-muted-foreground mt-1">
                                                    <div className="flex items-center gap-1">
                                                        <Calendar className="h-4 w-4" />
                                                        {new Date(booking.startDate).toLocaleDateString('ru-RU')} -{' '}
                                                        {new Date(booking.endDate).toLocaleDateString('ru-RU')}
                                                    </div>
                                                    {booking.car.specifications && (
                                                        <>
                                                            <div>
                                                                Трансмиссия: {booking.car.specifications.transmission}
                                                            </div>
                                                            <div>
                                                                Мест: {booking.car.specifications.seats}
                                                            </div>
                                                        </>
                                                    )}
                                                </div>
                                            </div>
                                            <span className={getStatusBadgeClass(booking.status)}>
                                                {getStatusLabel(booking.status)}
                                            </span>
                                        </div>

                                        {/* Дополнительные услуги */}
                                        {hasExtras(booking.extras) && (
                                            <div className="flex flex-wrap gap-2">
                                                {booking.extras.insurance && (
                                                    <span className="inline-flex items-center gap-1 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                                                        Страховка
                                                    </span>
                                                )}
                                                {booking.extras.gps && (
                                                    <span className="inline-flex items-center gap-1 text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                                                        GPS
                                                    </span>
                                                )}
                                                {booking.extras.childSeat && (
                                                    <span className="inline-flex items-center gap-1 text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full">
                                                        Детское кресло
                                                    </span>
                                                )}
                                                {booking.extras.additionalDriver && (
                                                    <span className="inline-flex items-center gap-1 text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                                                        Дополнительный водитель
                                                    </span>
                                                )}
                                            </div>
                                        )}

                                        {booking.status === 'CONFIRMED' && (
                                            <div className="p-4 bg-green-50 rounded-lg border border-green-200 space-y-2">
                                                <div className="flex items-start gap-2">
                                                    <Info className="h-5 w-5 text-green-600 mt-0.5" />
                                                    <div>
                                                        <h4 className="font-medium text-green-900">Бронирование подтверждено</h4>
                                                        <p className="text-sm text-green-800">
                                                            Для получения автомобиля, пожалуйста, прибудите по адресу: <strong>ул. Примерная, 123</strong> в выбранную дату.
                                                            При себе необходимо иметь:
                                                        </p>
                                                        <ul className="text-sm text-green-800 mt-2 space-y-1 list-disc list-inside">
                                                            <li>Паспорт</li>
                                                            <li>Водительское удостоверение</li>
                                                            <li>Банковскую карту для внесения депозита</li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        )}

                                        <div className="flex justify-between items-center">
                                            <div>
                                                <div className="text-lg font-semibold">
                                                    {formatPrice(booking.totalPrice)} ₽
                                                </div>
                                                <div className="text-sm text-muted-foreground">
                                                    Оплата при получении
                                                </div>
                                            </div>
                                            {booking.status === 'PENDING' && (
                                                <Button
                                                    variant="outline"
                                                    onClick={() => handleCancelBooking(booking.id)}
                                                    disabled={cancelLoading === booking.id}
                                                >
                                                    {cancelLoading === booking.id ? 'Отмена...' : 'Отменить бронирование'}
                                                </Button>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}

function getStatusBadgeClass(status: string) {
    const baseClasses = "px-3 py-1 rounded-full text-sm font-medium";
    switch (status) {
        case 'PENDING':
            return `${baseClasses} bg-yellow-100 text-yellow-800`;
        case 'CONFIRMED':
            return `${baseClasses} bg-green-100 text-green-800`;
        case 'IN_PROGRESS':
            return `${baseClasses} bg-blue-100 text-blue-800`;
        case 'COMPLETED':
            return `${baseClasses} bg-gray-100 text-gray-800`;
        case 'CANCELLED':
            return `${baseClasses} bg-red-100 text-red-800`;
        default:
            return baseClasses;
    }
}

function getStatusLabel(status: string) {
    switch (status) {
        case 'PENDING':
            return 'Ожидает подтверждения';
        case 'CONFIRMED':
            return 'Подтверждено';
        case 'IN_PROGRESS':
            return 'В процессе';
        case 'COMPLETED':
            return 'Завершено';
        case 'CANCELLED':
            return 'Отменено';
        default:
            return status;
    }
}

function hasExtras(extras: BookingExtras) {
    return extras.insurance || extras.gps || extras.childSeat || extras.additionalDriver;
}

// File: app\editor\bookings\page.tsx
'use client';

import Image from 'next/image';
import { useState, useEffect } from 'react';
import { Car, Calendar, User as UserIcon, Loader2, Check, X, Shield } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { formatPrice } from '@/lib/utils/format';

interface BookingExtras {
    insurance: boolean;
    gps: boolean;
    childSeat: boolean;
    additionalDriver: boolean;
}

interface Booking {
    id: string;
    startDate: string;
    endDate: string;
    totalPrice: number;
    status: 'PENDING' | 'CONFIRMED' | 'CANCELLED' | 'IN_PROGRESS' | 'COMPLETED';
    car: {
        id: string;
        make: string;
        model: string;
        year: number;
        images: string[];
        specifications: {
            transmission: string | null;
            fuelType: string | null;
            seats: number | null;
        } | null;
    };
    user: {
        id: string;
        firstName: string;
        lastName: string;
        email: string;
        avatar: string | null;
    };
    extras: BookingExtras;
}

export default function EditorBookingsPage() {
    const [bookings, setBookings] = useState<Booking[]>([]);
    const [loading, setLoading] = useState(true);
    const [actionLoading, setActionLoading] = useState<string | null>(null);

    useEffect(() => {
        fetchBookings();
    }, []);

    const fetchBookings = async () => {
        try {
            const response = await fetch('/api/editor/bookings');
            if (response.ok) {
                const data = await response.json();
                setBookings(data.bookings);
            }
        } catch (error) {
            console.error('Error fetching bookings:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleStatusChange = async (bookingId: string, status: Booking['status']) => {
        setActionLoading(bookingId);
        try {
            const response = await fetch(`/api/editor/bookings/${bookingId}/status`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status })
            });

            if (response.ok) {
                setBookings(bookings.map(booking =>
                    booking.id === bookingId
                        ? { ...booking, status }
                        : booking
                ));
            }
        } catch (error) {
            console.error('Error updating booking status:', error);
        } finally {
            setActionLoading(null);
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="max-w-7xl mx-auto py-12 px-4">
            <div className="mb-8">
                <h1 className="text-2xl font-bold">Управление бронированиями</h1>
                <p className="text-muted-foreground">
                    Просмотр и управление бронированиями пользователей
                </p>
            </div>

            <div className="space-y-6">
                {bookings.map((booking) => (
                    <div
                        key={booking.id}
                        className="border rounded-lg p-6 bg-card"
                    >
                        <div className="flex flex-col lg:flex-row gap-6">
                            {/* Информация об автомобиле */}
                            <div className="lg:w-1/3">
                                <div className="aspect-video rounded-lg overflow-hidden bg-muted">
                                    {booking.car.images[0] ? (
                                        <Image
                                            src={booking.car.images[0]}
                                            alt={`${booking.car.make} ${booking.car.model}`}
                                            className="w-full h-full object-cover"
                                        />
                                    ) : (
                                        <div className="w-full h-full flex items-center justify-center">
                                            <Car className="h-12 w-12 text-muted-foreground" />
                                        </div>
                                    )}
                                </div>
                                <div className="mt-4">
                                    <h3 className="text-lg font-semibold">
                                        {booking.car.make} {booking.car.model} {booking.car.year}
                                    </h3>
                                    {booking.car.specifications && (
                                        <div className="text-sm text-muted-foreground mt-1 space-y-1">
                                            <div>Трансмиссия: {booking.car.specifications.transmission}</div>
                                            <div>Топливо: {booking.car.specifications.fuelType}</div>
                                            <div>Мест: {booking.car.specifications.seats}</div>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Информация о бронировании */}
                            <div className="lg:w-2/3 space-y-6">
                                {/* Информация о клиенте */}
                                <div className="flex items-center gap-4">
                                    <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center">
                                        {booking.user.avatar ? (
                                            <Image
                                                src={booking.user.avatar}
                                                alt=""
                                                className="h-12 w-12 rounded-full object-cover"
                                            />
                                        ) : (
                                            <UserIcon className="h-6 w-6 text-primary" />
                                        )}
                                    </div>
                                    <div>
                                        <div className="font-medium">
                                            {booking.user.firstName} {booking.user.lastName}
                                        </div>
                                        <div className="text-sm text-muted-foreground">
                                            {booking.user.email}
                                        </div>
                                    </div>
                                </div>

                                {/* Детали бронирования */}
                                <div className="grid md:grid-cols-2 gap-4">
                                    <div className="space-y-2">
                                        <div className="text-sm text-muted-foreground">Период аренды</div>
                                        <div className="flex items-center gap-2">
                                            <Calendar className="h-4 w-4" />
                                            <span>
                                                {new Date(booking.startDate).toLocaleDateString('ru-RU')} -{' '}
                                                {new Date(booking.endDate).toLocaleDateString('ru-RU')}
                                            </span>
                                        </div>
                                    </div>
                                    <div className="space-y-2">
                                        <div className="text-sm text-muted-foreground">Статус</div>
                                        <span className={getStatusBadgeClass(booking.status)}>
                                            {getStatusLabel(booking.status)}
                                        </span>
                                    </div>
                                </div>

                                {/* Дополнительные услуги */}
                                {hasExtras(booking.extras) && (
                                    <div className="space-y-2">
                                        <div className="text-sm text-muted-foreground">Дополнительные услуги</div>
                                        <div className="flex flex-wrap gap-2">
                                            {booking.extras.insurance && (
                                                <span className="inline-flex items-center gap-1 text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                                                    <Shield className="h-3 w-3" />
                                                    Страховка
                                                </span>
                                            )}
                                            {booking.extras.gps && (
                                                <span className="inline-flex items-center gap-1 text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full">
                                                    GPS
                                                </span>
                                            )}
                                            {booking.extras.childSeat && (
                                                <span className="inline-flex items-center gap-1 text-sm bg-purple-100 text-purple-800 px-2 py-1 rounded-full">
                                                    Детское кресло
                                                </span>
                                            )}
                                            {booking.extras.additionalDriver && (
                                                <span className="inline-flex items-center gap-1 text-sm bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                                                    Дополнительный водитель
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                )}

                                {/* Цена и действия */}
                                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                                    <div>
                                        <div className="text-2xl font-bold">
                                            {formatPrice(booking.totalPrice)} ₽
                                        </div>
                                        <div className="text-sm text-muted-foreground">
                                            Оплата при получении
                                        </div>
                                    </div>

                                    {booking.status === 'PENDING' && (
                                        <div className="flex gap-3 w-full sm:w-auto">
                                            <Button
                                                onClick={() => handleStatusChange(booking.id, 'CONFIRMED')}
                                                disabled={actionLoading === booking.id}
                                                className="flex-1 sm:flex-none"
                                            >
                                                {actionLoading === booking.id ? (
                                                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                                                ) : (
                                                    <Check className="h-4 w-4 mr-2" />
                                                )}
                                                Подтвердить
                                            </Button>
                                            <Button
                                                variant="outline"
                                                onClick={() => handleStatusChange(booking.id, 'CANCELLED')}
                                                disabled={actionLoading === booking.id}
                                                className="flex-1 sm:flex-none"
                                            >
                                                {actionLoading === booking.id ? (
                                                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                                                ) : (
                                                    <X className="h-4 w-4 mr-2" />
                                                )}
                                                Отклонить
                                            </Button>
                                        </div>
                                    )}

                                    {booking.status === 'CONFIRMED' && (
                                        <Button
                                            onClick={() => handleStatusChange(booking.id, 'IN_PROGRESS')}
                                            disabled={actionLoading === booking.id}
                                        >
                                            Начать аренду
                                        </Button>
                                    )}

                                    {booking.status === 'IN_PROGRESS' && (
                                        <Button
                                            onClick={() => handleStatusChange(booking.id, 'COMPLETED')}
                                            disabled={actionLoading === booking.id}
                                        >
                                            Завершить аренду
                                        </Button>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}

function getStatusBadgeClass(status: string) {
    const baseClasses = "px-3 py-1 rounded-full text-sm font-medium";
    switch (status) {
        case 'PENDING':
            return `${baseClasses} bg-yellow-100 text-yellow-800`;
        case 'CONFIRMED':
            return `${baseClasses} bg-green-100 text-green-800`;
        case 'IN_PROGRESS':
            return `${baseClasses} bg-blue-100 text-blue-800`;
        case 'COMPLETED':
            return `${baseClasses} bg-gray-100 text-gray-800`;
        case 'CANCELLED':
            return `${baseClasses} bg-red-100 text-red-800`;
        default:
            return baseClasses;
    }
}

function getStatusLabel(status: string) {
    switch (status) {
        case 'PENDING':
            return 'Ожидает подтверждения';
        case 'CONFIRMED':
            return 'Подтверждено';
        case 'IN_PROGRESS':
            return 'В процессе';
        case 'COMPLETED':
            return 'Завершено';
        case 'CANCELLED':
            return 'Отменено';
        default:
            return status;
    }
}

function hasExtras(extras: BookingExtras) {
    return extras.insurance || extras.gps || extras.childSeat || extras.additionalDriver;
}

// File: app\editor\cars\page.tsx
'use client';

import {useState, useEffect} from 'react';
import {Button} from "@/components/ui/button";
import {Car} from '@/lib/types/car';
import {Plus} from "lucide-react";
import Link from 'next/link';
import {EditorCarCard} from "@/components/cars/EditorCarCard";

export default function EditorCarsPage() {
    const [cars, setCars] = useState<Car[]>([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetchCars();
    }, []);

    const fetchCars = async () => {
        try {
            const response = await fetch('/api/cars');
            if (response.ok) {
                const { cars } = await response.json() as { cars: Car[] };
                setCars(cars.map((car) => ({
                    ...car,
                    pricePerDay: Number(car.pricePerDay)
                })));
            }
        } catch (error) {
            console.error('Error fetching cars:', error);
        } finally {
            setLoading(false);
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="max-w-7xl mx-auto px-4 py-8">
            <div className="flex justify-between items-center mb-8">
                <div>
                    <h1 className="text-2xl font-bold">Управление автомобилями</h1>
                    <p className="text-muted-foreground">
                        Добавление и редактирование автомобилей
                    </p>
                </div>
                <Link href="/editor/cars/new">
                    <Button className="flex items-center gap-2">
                        <Plus className="h-4 w-4"/>
                        Добавить автомобиль
                    </Button>
                </Link>
            </div>

            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {cars.map((car) => (
                    <EditorCarCard key={car.id} car={car}/>
                ))}
            </div>
        </div>
    );
}

// File: app\editor\cars\[id]\page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { ImageUpload } from '@/components/ImageUpload';
import { Loader2 } from 'lucide-react';

interface CarFormData {
    make: string;
    model: string;
    year: number;
    type: string;
    pricePerDay: number;
    features: string[];
    description: string;
    images: string[];
    specifications: {
        transmission: string | null;
        fuelType: string | null;
        seats: number | null;
        luggage: number | null;
    };
}

const carTypes = ['Седан', 'Кроссовер', 'Спорткар', 'Минивэн'];
const featuresList = [
    'Автомат',
    'Климат-контроль',
    'Круиз-контроль',
    'Подогрев сидений',
    'Кожаный салон',
    'Панорамная крыша',
    'Автопилот'
];

const initialFormData: CarFormData = {
    make: '',
    model: '',
    year: new Date().getFullYear(),
    type: 'Седан',
    pricePerDay: 0,
    features: [],
    description: '',
    images: [],
    specifications: {
        transmission: null,
        fuelType: null,
        seats: 5,
        luggage: 0
    }
};

export default function CarEditorPage({ params }: { params: { id: string } }) {
    const router = useRouter();
    const isNew = params.id === 'new';
    const [formData, setFormData] = useState<CarFormData>(initialFormData);
    const [loading, setLoading] = useState(!isNew);
    const [saving, setSaving] = useState(false);

    useEffect(() => {
        const fetchCarData = async () => {
            try {
                const response = await fetch(`/api/cars/${params.id}`);
                if (response.ok) {
                    const data = await response.json();
                    setFormData({
                        ...data,
                        pricePerDay: Number(data.pricePerDay)
                    });
                } else {
                    router.push('/editor/cars');
                }
            } catch (error) {
                console.error('Error fetching car:', error);
                router.push('/editor/cars');
            } finally {
                setLoading(false);
            }
        };

        if (!isNew) {
            fetchCarData();
        }
    }, [isNew, params.id, router]);

    const handleFeatureToggle = (feature: string) => {
        setFormData(prev => ({
            ...prev,
            features: prev.features.includes(feature)
                ? prev.features.filter(f => f !== feature)
                : [...prev.features, feature]
        }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setSaving(true);

        try {
            const response = await fetch(`/api/editor/cars/${isNew ? '' : params.id}`, {
                method: isNew ? 'POST' : 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Ошибка при сохранении');
            }

            router.push('/editor/cars');
        } catch (error) {
            console.error('Error saving car:', error);
            alert('Произошла ошибка при сохранении');
        } finally {
            setSaving(false);
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary" />
            </div>
        );
    }

    return (
        <div className="max-w-3xl mx-auto px-4 py-8">
            <h1 className="text-2xl font-bold mb-8">
                {isNew ? 'Добавление автомобиля' : 'Редактирование автомобиля'}
            </h1>

            <form onSubmit={handleSubmit} className="space-y-6">
                <ImageUpload
                    images={formData.images}
                    onChange={(newImages) => setFormData({ ...formData, images: newImages })}
                />

                <div className="grid gap-6 md:grid-cols-2">
                    <div>
                        <label className="block text-sm font-medium mb-2">Марка</label>
                        <input
                            type="text"
                            className="w-full rounded-md border px-3 py-2"
                            value={formData.make}
                            onChange={(e) => setFormData({ ...formData, make: e.target.value })}
                            required
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium mb-2">Модель</label>
                        <input
                            type="text"
                            className="w-full rounded-md border px-3 py-2"
                            value={formData.model}
                            onChange={(e) => setFormData({ ...formData, model: e.target.value })}
                            required
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium mb-2">Год</label>
                        <input
                            type="number"
                            className="w-full rounded-md border px-3 py-2"
                            value={formData.year}
                            onChange={(e) => setFormData({ ...formData, year: parseInt(e.target.value) })}
                            required
                            min="1900"
                            max={new Date().getFullYear() + 1}
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium mb-2">Тип</label>
                        <select
                            className="w-full rounded-md border px-3 py-2"
                            value={formData.type}
                            onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                            required
                        >
                            {carTypes.map((type) => (
                                <option key={type} value={type}>{type}</option>
                            ))}
                        </select>
                    </div>
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Цена за день</label>
                    <input
                        type="number"
                        className="w-full rounded-md border px-3 py-2"
                        value={formData.pricePerDay}
                        onChange={(e) => setFormData({ ...formData, pricePerDay: parseInt(e.target.value) })}
                        required
                        min="0"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Описание</label>
                    <textarea
                        className="w-full rounded-md border px-3 py-2 h-32"
                        value={formData.description}
                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Особенности</label>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                        {featuresList.map((feature) => (
                            <label key={feature} className="flex items-center gap-2">
                                <input
                                    type="checkbox"
                                    checked={formData.features.includes(feature)}
                                    onChange={() => handleFeatureToggle(feature)}
                                    className="rounded"
                                />
                                <span>{feature}</span>
                            </label>
                        ))}
                    </div>
                </div>

                <div>
                    <h3 className="text-lg font-medium mb-4">Характеристики</h3>
                    <div className="grid gap-4 md:grid-cols-2">
                        <div>
                            <label className="block text-sm font-medium mb-2">Трансмиссия</label>
                            <input
                                type="text"
                                className="w-full rounded-md border px-3 py-2"
                                value={formData.specifications.transmission || ''}
                                onChange={(e) => setFormData({
                                    ...formData,
                                    specifications: { ...formData.specifications, transmission: e.target.value }
                                })}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Тип топлива</label>
                            <input
                                type="text"
                                className="w-full rounded-md border px-3 py-2"
                                value={formData.specifications.fuelType || ''}
                                onChange={(e) => setFormData({
                                    ...formData,
                                    specifications: { ...formData.specifications, fuelType: e.target.value }
                                })}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Количество мест</label>
                            <input
                                type="number"
                                className="w-full rounded-md border px-3 py-2"
                                value={formData.specifications.seats || ''}
                                onChange={(e) => setFormData({
                                    ...formData,
                                    specifications: { ...formData.specifications, seats: parseInt(e.target.value) }
                                })}
                                min="1"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Объем багажника (л)</label>
                            <input
                                type="number"
                                className="w-full rounded-md border px-3 py-2"
                                value={formData.specifications.luggage || ''}
                                onChange={(e) => setFormData({
                                    ...formData,
                                    specifications: { ...formData.specifications, luggage: parseInt(e.target.value) }
                                })}
                                min="0"
                            />
                        </div>
                    </div>
                </div>

                <div className="flex justify-end gap-4">
                    <Button
                        type="button"
                        variant="outline"
                        onClick={() => router.push('/editor/cars')}
                    >
                        Отмена
                    </Button>
                    <Button
                        type="submit"
                        disabled={saving}
                        className="gap-2"
                    >
                        {saving && <Loader2 className="h-4 w-4 animate-spin" />}
                        {saving ? 'Сохранение...' : 'Сохранить'}
                    </Button>
                </div>
            </form>
        </div>
    );
}

// File: app\how-it-works\page.tsx
import { Car, Calendar, CreditCard, CheckCircle } from "lucide-react";

const steps = [
    {
        icon: Car,
        title: "Выберите автомобиль",
        description: "Просмотрите наш автопарк и выберите автомобиль, который подходит именно вам"
    },
    {
        icon: Calendar,
        title: "Укажите даты",
        description: "Выберите удобные даты и время для получения и возврата автомобиля"
    },
    {
        icon: CreditCard,
        title: "Оформите бронь",
        description: "Заполните необходимые данные и оплатите аренду любым удобным способом"
    },
    {
        icon: CheckCircle,
        title: "Получите автомобиль",
        description: "Заберите автомобиль в назначенное время и наслаждайтесь поездкой"
    }
];

const features = [
    {
        title: "Выгодные цены",
        description: "Прозрачное ценообразование без скрытых платежей"
    },
    {
        title: "Круглосуточная поддержка",
        description: "Наши специалисты всегда готовы помочь вам"
    },
    {
        title: "Чистые автомобили",
        description: "Все автомобили проходят тщательную подготовку перед выдачей"
    }
];

export default function HowItWorksPage() {
    return (
        <div className="py-12">
            {/* Hero Section */}
            <div className="text-center mb-16">
                <h1 className="text-4xl font-bold mb-4">Как работает RentCar</h1>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                    Аренда автомобиля никогда не была такой простой. Следуйте этим шагам, чтобы начать.
                </p>
            </div>

            {/* Steps */}
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto mb-20">
                {steps.map((step, index) => (
                    <div key={index} className="text-center space-y-4">
                        <div className="w-16 h-16 mx-auto bg-primary/10 rounded-full flex items-center justify-center">
                            <step.icon className="w-8 h-8 text-primary" />
                        </div>
                        <h3 className="text-xl font-semibold">{step.title}</h3>
                        <p className="text-muted-foreground">{step.description}</p>
                    </div>
                ))}
            </div>

            {/* Requirements Section */}
            <div className="bg-secondary py-16 px-4 mb-20">
                <div className="max-w-4xl mx-auto">
                    <h2 className="text-2xl font-bold text-center mb-8">Требования для аренды</h2>
                    <div className="grid md:grid-cols-2 gap-8">
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold">Документы</h3>
                            <ul className="space-y-2 list-disc list-inside text-muted-foreground">
                                <li>Паспорт гражданина РФ</li>
                                <li>Водительское удостоверение (стаж от 2 лет)</li>
                                <li>Действующая банковская карта на ваше имя</li>
                            </ul>
                        </div>
                        <div className="space-y-4">
                            <h3 className="text-lg font-semibold">Условия</h3>
                            <ul className="space-y-2 list-disc list-inside text-muted-foreground">
                                <li>Возраст не менее 21 года</li>
                                <li>Депозит (сумма зависит от класса автомобиля)</li>
                                <li>Чистая кредитная история</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            {/* Features */}
            <div className="max-w-4xl mx-auto px-4">
                <h2 className="text-2xl font-bold text-center mb-8">Преимущества RentCar</h2>
                <div className="grid md:grid-cols-3 gap-8">
                    {features.map((feature, index) => (
                        <div key={index} className="text-center space-y-2">
                            <h3 className="text-lg font-semibold">{feature.title}</h3>
                            <p className="text-muted-foreground">{feature.description}</p>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
}

// File: app\profile\page.tsx
'use client';

import { useAuth } from '@/hooks/auth/useAuth';
import { Button } from '@/components/ui/button';
import { useState, useEffect } from 'react';
import { User, Camera, Loader2 } from "lucide-react";
import Image from 'next/image';


interface ProfileFormData {
    firstName: string;
    lastName: string;
    email: string;
    currentPassword: string;
    newPassword: string;
    confirmPassword: string;
}

export default function ProfilePage() {
    const { user, updateUserData } = useAuth();
    const [isEditing, setIsEditing] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const [loading, setLoading] = useState(false);
    const [formData, setFormData] = useState<ProfileFormData>({
        firstName: '',
        lastName: '',
        email: '',
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
    });

    useEffect(() => {
        if (user) {
            setFormData(prev => ({
                ...prev,
                firstName: user.firstName || '',
                lastName: user.lastName || '',
                email: user.email || ''
            }));
        }
    }, [user]);

    const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (!file) return;

        setLoading(true);
        setError('');

        try {
            const formData = new FormData();
            formData.append('file', file);

            const response = await fetch('/api/profile/avatar', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error('Ошибка при загрузке фото');
            }

            await updateUserData();
            setSuccess('Фото успешно обновлено');
        } catch (err) {
            setError('Ошибка при загрузке фото');
            console.error('Upload error:', err);
        } finally {
            setLoading(false);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');
        setSuccess('');
        setLoading(true);

        // Проверка паролей при их изменении
        if (formData.newPassword) {
            if (formData.newPassword.length < 6) {
                setError('Новый пароль должен быть не менее 6 символов');
                setLoading(false);
                return;
            }
            if (formData.newPassword !== formData.confirmPassword) {
                setError('Пароли не совпадают');
                setLoading(false);
                return;
            }
            if (!formData.currentPassword) {
                setError('Введите текущий пароль');
                setLoading(false);
                return;
            }
        }

        try {
            const response = await fetch('/api/profile/update', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    firstName: formData.firstName,
                    lastName: formData.lastName,
                    email: formData.email,
                    currentPassword: formData.currentPassword || undefined,
                    newPassword: formData.newPassword || undefined,
                }),
            });

            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Ошибка при обновлении профиля');
            }

            await updateUserData();
            setSuccess('Профиль успешно обновлен');
            setIsEditing(false);

            // Очищаем поля пароля
            setFormData(prev => ({
                ...prev,
                currentPassword: '',
                newPassword: '',
                confirmPassword: ''
            }));
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Произошла ошибка');
        } finally {
            setLoading(false);
        }
    };

    if (!user) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="max-w-2xl mx-auto py-12 px-4">
            <div className="bg-card border rounded-lg p-8">
                {/* Заголовок */}
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-2xl font-bold">Профиль</h1>
                    <Button
                        variant="outline"
                        onClick={() => setIsEditing(!isEditing)}
                        disabled={loading}
                    >
                        {isEditing ? 'Отменить' : 'Редактировать'}
                    </Button>
                </div>

                {/* Форма */}
                <form onSubmit={handleSubmit} className="space-y-8">
                    {/* Фото профиля */}
                    <div className="flex flex-col items-center">
                        <div className="relative">
                            <div className="h-32 w-32 rounded-full bg-muted overflow-hidden">
                                {user.avatar ? (
                                    <Image
                                        src={user.avatar}
                                        alt="Profile"
                                        className="w-full h-full object-cover"
                                    />
                                ) : (
                                    <User className="h-full w-full p-6 text-muted-foreground" />
                                )}
                            </div>
                            {isEditing && (
                                <label className="absolute bottom-0 right-0 cursor-pointer">
                                    <div className="rounded-full p-2 bg-primary text-primary-foreground shadow-lg hover:bg-primary/90">
                                        {loading ? (
                                            <Loader2 className="h-4 w-4 animate-spin" />
                                        ) : (
                                            <Camera className="h-4 w-4" />
                                        )}
                                    </div>
                                    <input
                                        type="file"
                                        accept="image/*"
                                        className="hidden"
                                        onChange={handleImageUpload}
                                        disabled={loading}
                                    />
                                </label>
                            )}
                        </div>
                    </div>

                    {/* Основные данные */}
                    <div className="grid gap-6 md:grid-cols-2">
                        <div>
                            <label className="block text-sm font-medium mb-2">Имя</label>
                            <input
                                type="text"
                                value={formData.firstName}
                                onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
                                disabled={!isEditing || loading}
                                className="w-full rounded-md border px-3 py-2"
                                required
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Фамилия</label>
                            <input
                                type="text"
                                value={formData.lastName}
                                onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
                                disabled={!isEditing || loading}
                                className="w-full rounded-md border px-3 py-2"
                                required
                            />
                        </div>
                    </div>

                    <div>
                        <label className="block text-sm font-medium mb-2">Email</label>
                        <input
                            type="email"
                            value={formData.email}
                            onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                            disabled={!isEditing || loading}
                            className="w-full rounded-md border px-3 py-2"
                            required
                        />
                    </div>

                    {/* Смена пароля */}
                    {isEditing && (
                        <div className="space-y-6 border-t pt-6">
                            <h3 className="font-medium">Изменить пароль</h3>
                            <div>
                                <label className="block text-sm font-medium mb-2">Текущий пароль</label>
                                <input
                                    type="password"
                                    value={formData.currentPassword}
                                    onChange={(e) => setFormData(prev => ({ ...prev, currentPassword: e.target.value }))}
                                    disabled={loading}
                                    className="w-full rounded-md border px-3 py-2"
                                />
                            </div>
                            <div className="grid gap-6 md:grid-cols-2">
                                <div>
                                    <label className="block text-sm font-medium mb-2">Новый пароль</label>
                                    <input
                                        type="password"
                                        value={formData.newPassword}
                                        onChange={(e) => setFormData(prev => ({ ...prev, newPassword: e.target.value }))}
                                        disabled={loading}
                                        className="w-full rounded-md border px-3 py-2"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium mb-2">Подтверждение пароля</label>
                                    <input
                                        type="password"
                                        value={formData.confirmPassword}
                                        onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                                        disabled={loading}
                                        className="w-full rounded-md border px-3 py-2"
                                    />
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Сообщения об ошибках и успехе */}
                    {error && (
                        <div className="text-sm text-destructive">{error}</div>
                    )}
                    {success && (
                        <div className="text-sm text-green-600">{success}</div>
                    )}

                    {/* Кнопки */}
                    {isEditing && (
                        <Button
                            type="submit"
                            className="w-full"
                            disabled={loading}
                        >
                            {loading && <Loader2 className="h-4 w-4 animate-spin mr-2" />}
                            {loading ? 'Сохранение...' : 'Сохранить изменения'}
                        </Button>
                    )}
                </form>
            </div>
        </div>
    );
}

// File: app\sign-in\page.tsx
'use client';

import { useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from "@/components/ui/button";
import { useAuth } from '@/hooks/auth/useAuth';

export default function SignInPage() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const router = useRouter();
    const searchParams = useSearchParams();
    const { login } = useAuth();

    async function handleSubmit(e: React.FormEvent) {
        e.preventDefault();
        setError('');
        setLoading(true);

        try {
            const response = await login(email, password);
            // После успешного входа получаем роль пользователя
            const userRole = response?.user?.role;

            // Проверяем, есть ли redirectTo в URL
            const redirectTo = searchParams.get('redirectTo');

            if (redirectTo) {
                // Если есть redirectTo, переходим по этому пути
                router.push(redirectTo);
            } else {
                // Если redirectTo нет, выбираем путь в зависимости от роли
                if (userRole === 'ADMIN' || userRole === 'EDITOR') {
                    router.push('/editor/cars');
                } else {
                    router.push('/cars');
                }
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Произошла ошибка');
        } finally {
            setLoading(false);
        }
    }

    return (
        <div className="max-w-md mx-auto space-y-6 py-12">
            <div className="text-center">
                <h1 className="text-2xl font-bold">Вход в систему</h1>
                <p className="text-muted-foreground mt-2">
                    Введите ваши данные для входа
                </p>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label className="block text-sm font-medium mb-2">Email</label>
                    <input
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full rounded-md border px-3 py-2"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Пароль</label>
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full rounded-md border px-3 py-2"
                        required
                    />
                </div>

                {error && (
                    <div className="text-sm text-destructive">{error}</div>
                )}

                <Button
                    type="submit"
                    className="w-full"
                    disabled={loading}
                >
                    {loading ? 'Вход...' : 'Войти'}
                </Button>
            </form>

            <div className="text-center text-sm">
                <span className="text-muted-foreground">Нет аккаунта? </span>
                <Link href="/sign-up" className="text-primary hover:underline">
                    Зарегистрироваться
                </Link>
            </div>
        </div>
    );
}

// File: app\sign-up\page.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Button } from "@/components/ui/button";

export default function SignUpPage() {
    const [formData, setFormData] = useState({
        email: '',
        password: '',
        firstName: '',
        lastName: '',
    });
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const router = useRouter();

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');
        setLoading(true);

        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
            });

            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Ошибка регистрации');
            }

            router.push('/sign-in?registered=true');
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Произошла ошибка');
        } finally {
            setLoading(false);
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    return (
        <div className="max-w-md mx-auto space-y-6 py-12">
            <div className="text-center">
                <h1 className="text-2xl font-bold">Регистрация</h1>
                <p className="text-muted-foreground mt-2">
                    Создайте новый аккаунт
                </p>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label className="block text-sm font-medium mb-2">Имя</label>
                    <input
                        type="text"
                        name="firstName"
                        value={formData.firstName}
                        onChange={handleChange}
                        className="w-full rounded-md border px-3 py-2"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Фамилия</label>
                    <input
                        type="text"
                        name="lastName"
                        value={formData.lastName}
                        onChange={handleChange}
                        className="w-full rounded-md border px-3 py-2"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Email</label>
                    <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        className="w-full rounded-md border px-3 py-2"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">Пароль</label>
                    <input
                        type="password"
                        name="password"
                        value={formData.password}
                        onChange={handleChange}
                        className="w-full rounded-md border px-3 py-2"
                        required
                    />
                </div>

                {error && (
                    <div className="text-sm text-destructive">{error}</div>
                )}

                <Button
                    type="submit"
                    className="w-full"
                    disabled={loading}
                >
                    {loading ? 'Регистрация...' : 'Зарегистрироваться'}
                </Button>
            </form>

            <div className="text-center text-sm">
                <span className="text-muted-foreground">Уже есть аккаунт? </span>
                <Link href="/sign-in" className="text-primary hover:underline">
                    Войти
                </Link>
            </div>
        </div>
    );
}

// File: auth\useAuthStore.ts
import { create } from 'zustand';
import { User } from '@prisma/client';

interface AuthState {
    user: User | null;
    setUser: (user: User | null) => void;
    isAuthenticated: boolean;
    isAdmin: boolean;
    isEditor: boolean;
}

export const useAuthStore = create<AuthState>((set) => ({
    user: null,
    setUser: (user) => set((state) => ({
        user,
        isAuthenticated: !!user,
        isAdmin: user?.role === 'ADMIN',
        isEditor: user?.role === 'EDITOR' || user?.role === 'ADMIN',
    })),
    isAuthenticated: false,
    isAdmin: false,
    isEditor: false,
}));

// File: components\Container.tsx
import React from "react";

const Container = ({children}: { children: React.ReactNode }) => {
    return (<div className="max-w-[1920px] w-full mx-auto x1:px-20 px-4 py-4">
        {children}
    </div>)
}

export default Container;

// File: components\ImageUpload.tsx
'use client';

import Image from 'next/image';
import { useState } from 'react';
import { Upload, Loader2, X } from 'lucide-react';

interface ImageUploadProps {
    images: string[];
    onChange: (newImages: string[]) => void;
}

export function ImageUpload({ images, onChange }: ImageUploadProps) {
    const [uploading, setUploading] = useState(false);

    const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
        if (!e.target.files?.length) return;

        setUploading(true);
        const file = e.target.files[0];
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('/api/editor/upload', {
                method: 'POST',
                body: formData,
            });

            if (response.ok) {
                const data = await response.json();
                onChange([...images, data.url]);
            } else {
                const error = await response.json();
                console.error('Upload error:', error);
                alert('Ошибка при загрузке изображения');
            }
        } catch (error) {
            console.error('Upload error:', error);
            alert('Ошибка при загрузке изображения');
        } finally {
            setUploading(false);
        }
    };

    const handleRemoveImage = (index: number) => {
        const newImages = images.filter((_, i) => i !== index);
        onChange(newImages);
    };

    return (
        <div>
            <label className="block text-sm font-medium mb-2">Фотографии</label>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {images.map((image, index) => (
                    <div key={index} className="relative aspect-square bg-muted rounded-lg overflow-hidden">
                        <Image
                            src={image}
                            alt=""
                            className="w-full h-full object-cover"
                        />
                        <button
                            type="button"
                            onClick={() => handleRemoveImage(index)}
                            className="absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                        >
                            <X className="h-4 w-4" />
                        </button>
                    </div>
                ))}
                <label className="aspect-square bg-muted rounded-lg border-2 border-dashed border-border flex flex-col items-center justify-center cursor-pointer hover:border-primary">
                    {uploading ? (
                        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                    ) : (
                        <>
                            <Upload className="h-8 w-8 text-muted-foreground mb-2" />
                            <span className="text-sm text-muted-foreground">Добавить фото</span>
                        </>
                    )}
                    <input
                        type="file"
                        accept="image/*"
                        className="hidden"
                        onChange={handleImageUpload}
                        disabled={uploading}
                    />
                </label>
            </div>
        </div>
    );
}

// File: components\booking\BookingCalendar.tsx
'use client';

import { useState, useEffect } from 'react';
import { Calendar } from "@/components/ui/calendar";
import { DateRange } from 'react-day-picker';
import { ru } from 'date-fns/locale';

interface BookedDates {
    startDate: string;
    endDate: string;
}

interface BookingCalendarProps {
    carId: string;
    onDateRangeChange: (range: DateRange | undefined) => void;
}

export default function BookingCalendar({ carId, onDateRangeChange }: BookingCalendarProps) {
    const [date, setDate] = useState<DateRange | undefined>();
    const [bookedDates, setBookedDates] = useState<BookedDates[]>([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchBookedDates = async () => {
            try {
                const response = await fetch(`/api/cars/${carId}/booked-dates`);
                if (response.ok) {
                    const data = await response.json();
                    setBookedDates(data.bookedDates);
                }
            } catch (error) {
                console.error('Error fetching booked dates:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchBookedDates();
    }, [carId]);

    const isDateDisabled = (date: Date) => {
        if (!date) return false;

        return bookedDates.some(booking => {
            const startDate = new Date(booking.startDate);
            const endDate = new Date(booking.endDate);

            // Устанавливаем время в полночь для корректного сравнения
            const compareDate = new Date(date);
            compareDate.setHours(0, 0, 0, 0);
            startDate.setHours(0, 0, 0, 0);
            endDate.setHours(0, 0, 0, 0);

            return compareDate >= startDate && compareDate <= endDate;
        });
    };

    const handleSelect = (range: DateRange | undefined) => {
        if (range && range.from && range.to) {
            // Проверяем каждый день в выбранном диапазоне
            const currentDate = new Date(range.from);
            while (currentDate <= range.to) {
                if (isDateDisabled(currentDate)) {
                    // Если хотя бы один день в диапазоне недоступен, не обновляем состояние
                    return;
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }
        }
        setDate(range);
        onDateRangeChange(range);
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center p-4">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <Calendar
            mode="range"
            selected={date}
            onSelect={handleSelect}
            locale={ru}
            disabled={[
                { before: new Date() }, // Отключаем прошедшие даты
                { dayOfWeek: [] }, // Добавьте сюда дни недели, если нужно их отключить
                isDateDisabled // Наша функция для отключения забронированных дат
            ]}
            defaultMonth={new Date()}
            numberOfMonths={1}
            showOutsideDays={true}
            className="rounded-md border"
            classNames={{
                day_disabled: "text-muted-foreground opacity-50 line-through cursor-not-allowed",
            }}
        />
    );
}

// File: components\cars\CarCard.tsx
'use client';

import Image from 'next/image';
import React from 'react';
import { Car, Edit, Trash } from "lucide-react";
import { Button } from "@/components/ui/button";
import type { Car as CarType } from '@/lib/types/car';
import { formatPrice } from '@/lib/utils/format';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

interface CarCardProps {
    car: CarType;
    isEditor?: boolean;
}

export default function CarCard({ car, isEditor }: CarCardProps) {
    const pathname = usePathname();
    const isEditorPage = pathname.startsWith('/editor');

    const handleDelete = async () => {
        if (!confirm('Вы уверены, что хотите удалить этот автомобиль?')) {
            return;
        }

        try {
            const response = await fetch(`/api/editor/cars/${car.id}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                window.location.reload();
            }
        } catch (error) {
            console.error('Error deleting car:', error);
        }
    };

    return (
        <div className="rounded-lg border bg-card overflow-hidden">
            <div className="relative h-48 w-full bg-muted">
                {car.images[0] ? (
                    <Image
                        src={car.images[0]}
                        alt={`${car.make} ${car.model}`}
                        fill={true}
                        className="object-cover"
                        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                    />
                ) : (
                    <div className="absolute inset-0 flex items-center justify-center text-muted-foreground">
                        <Car className="h-12 w-12"/>
                    </div>
                )}
            </div>
            <div className="p-4 space-y-4">
                <div>
                    <h3 className="text-xl font-semibold">{car.make} {car.model}</h3>
                    <p className="text-muted-foreground">{car.year} • {car.type}</p>
                </div>
                <div className="flex items-center gap-2 flex-wrap">
                    {car.features.slice(0, 3).map((feature) => (
                        <span
                            key={feature}
                            className="px-2 py-1 text-xs rounded-full bg-secondary"
                        >
                            {feature}
                        </span>
                    ))}
                </div>
                <div className="flex items-center justify-between mb-4">
                    <div>
                        <span className="text-2xl font-bold">{formatPrice(car.pricePerDay)} ₽</span>
                        <span className="text-muted-foreground">/день</span>
                    </div>
                    <Link href={isEditorPage ? `/editor/cars/${car.id}` : `/cars/${car.id}`}>
                        <Button>Подробнее</Button>
                    </Link>
                </div>
                {/* Кнопки редактирования для редактора */}
                {isEditor && isEditorPage && (
                    <div className="flex gap-2">
                        <Link href={`/editor/cars/${car.id}`} className="flex-1">
                            <Button variant="outline" className="w-full flex items-center justify-center gap-2">
                                <Edit className="h-4 w-4" />
                                Редактировать
                            </Button>
                        </Link>
                        <Button
                            variant="destructive"
                            onClick={handleDelete}
                            className="px-3"
                        >
                            <Trash className="h-4 w-4" />
                        </Button>
                    </div>
                )}
            </div>
        </div>
    );
}

// File: components\cars\CarFilter.tsx
'use client'

import { Button } from "@/components/ui/button";
import { SlidersHorizontal } from "lucide-react";
import { useState } from "react";
import type { PriceRange } from "@/lib/types/filters";

interface FilterOption {
    label: string;
    value: string;
}

const vehicleTypes: FilterOption[] = [
    { label: 'Седан', value: 'Седан' },
    { label: 'Кроссовер', value: 'Кроссовер' },
    { label: 'Спорткар', value: 'Спорткар' },
    { label: 'Минивэн', value: 'Минивэн' }
];

const features: FilterOption[] = [
    { label: 'Климат-контроль', value: 'Климат-контроль' },
    { label: 'Кожаный салон', value: 'Кожаный салон' },
    { label: 'Панорамная крыша', value: 'Панорамная крыша' },
    { label: 'Автопилот', value: 'Автопилот' }
];

interface CarFilterProps {
    selectedTypes: string[];
    selectedFeatures: string[];
    priceRange?: PriceRange;
    onTypeToggle: (type: string) => void;
    onFeatureToggle: (feature: string) => void;
    onPriceRangeChange: (range: PriceRange) => void;
}

export const CarFilter = ({
                              selectedTypes,
                              selectedFeatures,
                              priceRange,
                              onTypeToggle,
                              onFeatureToggle,
                              onPriceRangeChange
                          }: CarFilterProps) => {
    const [filtersVisible, setFiltersVisible] = useState(false);

    const handlePriceChange = (min: string, max: string) => {
        const minValue = parseInt(min) || 0;
        const maxValue = parseInt(max) || 0;
        if (maxValue > 0) {
            onPriceRangeChange({ min: minValue, max: maxValue });
        }
    };

    return (
        <div className="relative">
            <Button
                variant="outline"
                onClick={() => setFiltersVisible(!filtersVisible)}
                className="flex items-center gap-2"
            >
                <SlidersHorizontal className="h-5 w-5" />
                Фильтры
            </Button>

            {filtersVisible && (
                <div className="absolute right-0 top-full mt-2 w-72 rounded-lg border bg-background p-4 shadow-lg z-50">
                    <div className="space-y-4">
                        {/* Price Range */}
                        <div>
                            <label className="text-sm font-medium">Цена за день</label>
                            <div className="flex gap-2 mt-1">
                                <input
                                    type="number"
                                    placeholder="От"
                                    value={priceRange?.min || ''}
                                    onChange={(e) => handlePriceChange(e.target.value, (priceRange?.max || '').toString())}
                                    className="w-full rounded border px-3 py-1"
                                />
                                <input
                                    type="number"
                                    placeholder="До"
                                    value={priceRange?.max || ''}
                                    onChange={(e) => handlePriceChange((priceRange?.min || '').toString(), e.target.value)}
                                    className="w-full rounded border px-3 py-1"
                                />
                            </div>
                        </div>

                        {/* Vehicle Type */}
                        <div>
                            <label className="text-sm font-medium">Тип автомобиля</label>
                            <div className="mt-1 space-y-2">
                                {vehicleTypes.map((type) => (
                                    <label key={type.value} className="flex items-center gap-2">
                                        <input
                                            type="checkbox"
                                            checked={selectedTypes.includes(type.value)}
                                            onChange={() => onTypeToggle(type.value)}
                                            className="rounded"
                                        />
                                        <span>{type.label}</span>
                                    </label>
                                ))}
                            </div>
                        </div>

                        {/* Features */}
                        <div>
                            <label className="text-sm font-medium">Особенности</label>
                            <div className="mt-1 space-y-2">
                                {features.map((feature) => (
                                    <label key={feature.value} className="flex items-center gap-2">
                                        <input
                                            type="checkbox"
                                            checked={selectedFeatures.includes(feature.value)}
                                            onChange={() => onFeatureToggle(feature.value)}
                                            className="rounded"
                                        />
                                        <span>{feature.label}</span>
                                    </label>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

// File: components\cars\CarGrid.tsx
'use client';

import { Car } from "@/lib/types/car";
import CarCard from "@/components/cars/CarCard";

interface CarGridProps {
    cars: Car[];
    isEditor?: boolean;
}

export default function CarGrid({ cars, isEditor }: CarGridProps) {
    if (cars.length === 0) {
        return (
            <div className="text-center py-10">
                <p className="text-lg text-muted-foreground">
                    По вашему запросу ничего не найдено
                </p>
            </div>
        );
    }

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {cars.map((car) => (
                <CarCard
                    key={car.id}
                    car={car}
                    isEditor={isEditor}
                />
            ))}
        </div>
    );
}

// File: components\cars\CarsContainer.tsx
'use client';

import { CarSearch } from "./CarSearch";
import { CarFilter } from "./CarFilter";
import CarGrid from "./CarGrid";
import { useCarFilters } from "@/hooks/useCarFilters";
import { useEffect, useState } from "react";
import { useAuth } from '@/hooks/auth/useAuth';
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from 'next/link';
import { usePathname, useSearchParams, useRouter } from 'next/navigation';
import { Pagination } from "@/components/ui/pagination";
import type { Car } from "@/lib/types/car";

interface PaginationData {
    total: number;
    pages: number;
    currentPage: number;
    limit: number;
}

export const CarsContainer = () => {
    const [cars, setCars] = useState<Car[]>([]);
    const [loading, setLoading] = useState(true);
    const [pagination, setPagination] = useState<PaginationData>({
        total: 0,
        pages: 1,
        currentPage: 1,
        limit: 9
    });

    const { user } = useAuth();
    const pathname = usePathname();
    const searchParams = useSearchParams();
    const router = useRouter();
    const isEditorPage = pathname.startsWith('/editor');
    const hasEditRights = user?.role === 'EDITOR' || user?.role === 'ADMIN';

    const {
        filters,
        updateSearch,
        updatePriceRange,
        toggleType,
        toggleFeature,
        filteredCars
    } = useCarFilters(cars);

    const fetchCars = async (page: number = 1) => {
        try {
            const response = await fetch(`/api/cars?page=${page}&limit=${pagination.limit}`);
            if (response.ok) {
                const data = await response.json();
                setCars(data.cars.map((car: Car) => ({
                    ...car,
                    pricePerDay: Number(car.pricePerDay)
                })));
                setPagination(data.pagination);
            }
        } catch (error) {
            console.error('Error fetching cars:', error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        const page = parseInt(searchParams.get('page') || '1');
        fetchCars(page);
    }, [searchParams]);

    const handlePageChange = (page: number) => {
        const current = new URLSearchParams(Array.from(searchParams.entries()));
        current.set('page', page.toString());
        const search = current.toString();
        const query = search ? `?${search}` : '';
        router.push(`${pathname}${query}`);
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-[400px]">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="space-y-8">
            <div className="flex flex-col md:flex-row justify-between items-start gap-4">
                <div className="flex flex-col md:flex-row gap-4 flex-grow">
                    <CarSearch value={filters.search} onSearch={updateSearch} />
                    <CarFilter
                        selectedTypes={filters.types}
                        selectedFeatures={filters.features}
                        priceRange={filters.priceRange}
                        onTypeToggle={toggleType}
                        onFeatureToggle={toggleFeature}
                        onPriceRangeChange={updatePriceRange}
                    />
                </div>
                {hasEditRights && isEditorPage && (
                    <Link href="/editor/cars/new">
                        <Button className="w-full md:w-auto">
                            <Plus className="w-4 h-4 mr-2" />
                            Добавить автомобиль
                        </Button>
                    </Link>
                )}
            </div>

            <CarGrid cars={filteredCars} isEditor={isEditorPage && hasEditRights} />

            {pagination.pages > 1 && (
                <Pagination
                    currentPage={pagination.currentPage}
                    totalPages={pagination.pages}
                    onPageChange={handlePageChange}
                />
            )}
        </div>
    );
};

// File: components\cars\CarSearch.tsx
'use client'

import { Search } from "lucide-react";

interface CarSearchProps {
    value: string;
    onSearch: (value: string) => void;
}

export const CarSearch = ({ value, onSearch }: CarSearchProps) => {
    return (
        <div className="relative flex-grow">
            <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground" />
            <input
                type="text"
                value={value}
                onChange={(e) => onSearch(e.target.value)}
                placeholder="Поиск по марке, модели или типу..."
                className="w-full rounded-lg border pl-10 pr-4 py-2 text-base"
            />
        </div>
    );
};

// File: components\cars\EditorCarCard.tsx
'use client';

import Image from 'next/image';
import React from 'react';
import { Car, Edit, Trash } from "lucide-react";
import { Button } from "@/components/ui/button";
import type { Car as CarType } from '@/lib/types/car';
import { formatPrice } from '@/lib/utils/format';
import Link from 'next/link';
import {router} from "next/client";

interface EditorCarCardProps {
    car: CarType;
}

export const EditorCarCard: React.FC<EditorCarCardProps> = ({ car }) => {
    const handleDelete = async () => {
        if (!confirm('Вы уверены, что хотите удалить этот автомобиль?')) {
            return;
        }

        try {
            const response = await fetch(`/api/editor/cars/${car.id}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                router.push('/editor/cars?page=1'); // Добавили page=1 при редиректе
            }
        } catch (error) {
            console.error('Error deleting car:', error);
        }
    };

    return (
        <div className="rounded-lg border bg-card overflow-hidden">
            <div className="relative h-48 w-full bg-muted">
                {car.images[0] ? (
                    <Image
                        src={car.images[0]}
                        alt={`${car.make} ${car.model}`}
                        fill={true}
                        className="object-cover"
                        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                    />
                ) : (
                    <div className="absolute inset-0 flex items-center justify-center text-muted-foreground">
                        <Car className="h-12 w-12"/>
                    </div>
                )}
            </div>
            <div className="p-4 space-y-4">
                <div>
                    <h3 className="text-xl font-semibold">{car.make} {car.model}</h3>
                    <p className="text-muted-foreground">{car.year} • {car.type}</p>
                </div>
                <div className="flex items-center gap-2 flex-wrap">
                    {car.features.slice(0, 3).map((feature) => (
                        <span
                            key={feature}
                            className="px-2 py-1 text-xs rounded-full bg-secondary"
                        >
                            {feature}
                        </span>
                    ))}
                </div>
                <div className="flex items-center justify-between">
                    <div>
                        <span className="text-2xl font-bold">{formatPrice(car.pricePerDay)} ₽</span>
                        <span className="text-muted-foreground">/день</span>
                    </div>
                </div>
                <div className="flex gap-2">
                    <Link href={`/editor/cars/${car.id}`} className="flex-1">
                        <Button variant="outline" className="w-full flex items-center justify-center gap-2">
                            <Edit className="h-4 w-4" />
                            Редактировать
                        </Button>
                    </Link>
                    <Button
                        variant="destructive"
                        onClick={handleDelete}
                        className="px-3"
                    >
                        <Trash className="h-4 w-4" />
                    </Button>
                </div>
            </div>
        </div>
    );
};

// File: components\cars\MainBookingForm.tsx
'use client';

import { useAuth } from '@/hooks/auth/useAuth';
import { Info } from 'lucide-react';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar"
import { addDays } from "date-fns";
import { ru } from "date-fns/locale";
import type { DateRange } from "react-day-picker";

interface BookingFormProps {
    pricePerDay: number;
    carId: string;
}

interface BookedDates {
    startDate: Date;
    endDate: Date;
}

interface BookedDateResponse {
    startDate: string;
    endDate: string;
}

interface BookedDatesApiResponse {
    bookedDates: BookedDateResponse[];
}

interface ApiError {
    status: number;
    message: string;
}

interface BookingError {
    error?: string;
    status?: number;
}

const MainBookingForm = ({ carId, pricePerDay }: BookingFormProps) => {
    const { user } = useAuth();
    const isEditorOrAdmin = user?.role === 'EDITOR' || user?.role === 'ADMIN';

    if (isEditorOrAdmin) {
        return (
            <div className="border rounded-lg p-6 sticky top-24">
                <div className="flex items-start gap-4">
                    <Info className="h-6 w-6 text-primary mt-1 shrink-0" />
                    <div>
                        <h3 className="font-semibold mb-2">Редакторский доступ</h3>
                        <p className="text-muted-foreground text-sm">
                            Вы просматриваете эту страницу с правами редактора.
                            Функция бронирования автомобилей доступна только для обычных пользователей.
                        </p>
                    </div>
                </div>
                <div className="mt-4 border-t pt-4">
                    <div className="flex justify-between items-center font-semibold">
                        <span>Стоимость:</span>
                        <span className="text-xl">{pricePerDay.toLocaleString()} ₽/день</span>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <BookingForm carId={carId} pricePerDay={pricePerDay} />
    );
};

export default MainBookingForm;

const BookingForm = ({ pricePerDay, carId }: BookingFormProps) => {
    const { isAuthenticated } = useAuth();
    const router = useRouter();
    const [dateRange, setDateRange] = useState<DateRange | undefined>();
    const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);
    const [loading, setLoading] = useState(false);
    const [loadingDates, setLoadingDates] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [bookedDates, setBookedDates] = useState<BookedDates[]>([]);

    useEffect(() => {
        const fetchBookedDates = async () => {
            try {
                const response = await fetch(`/api/cars/${carId}/booked-dates`);
                if (!response.ok) {
                    const data = await response.json();
                    throw {
                        status: response.status,
                        message: data.error
                    };
                }
                const data = await response.json() as BookedDatesApiResponse;
                const dates = data.bookedDates.map((booking: BookedDateResponse) => ({
                    startDate: new Date(booking.startDate),
                    endDate: new Date(booking.endDate)
                }));
                setBookedDates(dates);
            } catch (error: unknown) {
                console.error('Booking error:', error);
                if (error instanceof Error) {
                    setError(error.message);
                } else {
                    const err = error as BookingError;
                    setError(err.error || 'Произошла ошибка при бронировании');
                }
            } finally {
                setLoadingDates(false);
            }
        };

        fetchBookedDates();
    }, [carId]);

    const calculateTotalPrice = () => {
        if (!dateRange?.from || !dateRange?.to) return 0;

        const start = dateRange.from;
        const end = dateRange.to;
        const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;

        const basePrice = days * pricePerDay;
        const featuresPrice = selectedFeatures.reduce((total, featureId) => {
            const feature = additionalFeatures.find(f => f.id === featureId);
            return total + (feature ? feature.price * days : 0);
        }, 0);

        return basePrice + featuresPrice;
    };

    const handleSubmit = async () => {
        if (!isAuthenticated) {
            router.push('/sign-in?redirectTo=' + window.location.pathname);
            return;
        }

        if (!dateRange?.from || !dateRange?.to) {
            setError('Выберите даты аренды');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            const response = await fetch('/api/bookings/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    carId,
                    startDate: dateRange.from,
                    endDate: dateRange.to,
                    extras: {
                        insurance: selectedFeatures.includes('insurance'),
                        childSeat: selectedFeatures.includes('childSeat'),
                        gps: selectedFeatures.includes('gps'),
                        additionalDriver: false
                    },
                    totalPrice: calculateTotalPrice()
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw {
                    status: response.status,
                    message: data.error
                } as ApiError;
            }

            router.push('/dashboard');
        } catch (error: unknown) {
            console.error('Booking error:', error);
            if (error instanceof Error) {
                setError(error.message);
            } else {
                const err = error as BookingError;
                setError(err.error || 'Произошла ошибка при бронировании');
            }
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="border rounded-lg p-6 space-y-6 sticky top-24">
            <div className="flex items-baseline justify-between">
                <span className="text-3xl font-bold">{pricePerDay.toLocaleString()} ₽</span>
                <span className="text-muted-foreground">/день</span>
            </div>

            <div className="space-y-4">
                <h3 className="font-semibold">Даты аренды</h3>
                {loadingDates ? (
                    <div className="flex justify-center p-4">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary" />
                    </div>
                ) : (
                    <div className="border rounded-md p-3">
                        <Calendar
                            mode="range"
                            selected={dateRange}
                            onSelect={setDateRange}
                            locale={ru}
                            disabled={[
                                { before: new Date() },
                                ...bookedDates.map(booking => ({
                                    from: booking.startDate,
                                    to: booking.endDate
                                }))
                            ]}
                            numberOfMonths={1}
                            defaultMonth={new Date()}
                            toDate={addDays(new Date(), 365)}
                            className="rounded-lg"
                            classNames={{
                                day_disabled: "text-muted-foreground opacity-50 line-through cursor-not-allowed pointer-events-none",
                                day_today: "bg-accent text-accent-foreground",
                                day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
                                day_range_middle: "bg-accent/50 text-accent-foreground",
                                day_hidden: "invisible",
                                day_outside: "text-muted-foreground opacity-50",
                            }}
                        />
                    </div>
                )}
                {dateRange?.from && (
                    <div className="text-sm text-muted-foreground">
                        Выбранный период: {dateRange.from.toLocaleDateString('ru-RU')}
                        {dateRange.to ? ` - ${dateRange.to.toLocaleDateString('ru-RU')}` : ''}
                    </div>
                )}
            </div>

            <div className="space-y-4">
                <h3 className="font-semibold">Дополнительные услуги</h3>
                <div className="space-y-3">
                    {additionalFeatures.map((feature) => (
                        <label key={feature.id} className="flex items-start gap-3">
                            <input
                                type="checkbox"
                                className="mt-1"
                                checked={selectedFeatures.includes(feature.id)}
                                onChange={(e) => {
                                    if (e.target.checked) {
                                        setSelectedFeatures([...selectedFeatures, feature.id]);
                                    } else {
                                        setSelectedFeatures(selectedFeatures.filter(id => id !== feature.id));
                                    }
                                }}
                            />
                            <div className="flex-grow">
                                <div className="font-medium">{feature.name}</div>
                                <div className="text-sm text-muted-foreground">{feature.description}</div>
                            </div>
                            <div className="text-sm font-medium whitespace-nowrap">
                                {feature.price.toLocaleString()} ₽/день
                            </div>
                        </label>
                    ))}
                </div>
            </div>

            {dateRange?.from && dateRange?.to && (
                <div className="border-t pt-4">
                    <div className="flex justify-between items-center font-semibold">
                        <span>Итого:</span>
                        <span className="text-xl">{calculateTotalPrice().toLocaleString()} ₽</span>
                    </div>
                </div>
            )}

            {error && (
                <div className="text-sm text-destructive">{error}</div>
            )}

            <Button
                className="w-full"
                onClick={handleSubmit}
                disabled={loading || !dateRange?.from || !dateRange?.to}
            >
                {loading ? 'Оформление...' : 'Забронировать'}
            </Button>

            <div className="text-sm text-muted-foreground text-center">
                Бесплатная отмена за 24 часа до начала аренды
            </div>
        </div>
    );
};

const additionalFeatures = [
    {
        id: 'insurance',
        name: 'Страховка КАСКО',
        description: 'Полная страховая защита автомобиля',
        price: 1500,
    },
    {
        id: 'childSeat',
        name: 'Детское кресло',
        description: 'Для детей от 9 месяцев до 12 лет',
        price: 500,
    },
    {
        id: 'gps',
        name: 'GPS-навигатор',
        description: 'Навигационная система с картами',
        price: 300,
    }
];

// File: components\error\ErrorPage.tsx
'use client';

import {Button} from "@/components/ui/button";
import Link from "next/link";
import {useRouter} from "next/navigation";

interface ErrorPageProps {
    code?: number;
    title: string;
    description: string;
    showBackButton?: boolean;
    showHomeButton?: boolean;
}

export default function ErrorPage({
                                      code,
                                      title,
                                      description,
                                      showBackButton = true,
                                      showHomeButton = true
                                  }: ErrorPageProps) {
    const router = useRouter();

    return (
        <div className="flex flex-col items-center justify-center min-h-[70vh] px-4">
            {code && (
                <h1 className="text-8xl font-bold text-primary/20">
                    {code}
                </h1>
            )}
            <h2 className="text-2xl font-bold mt-4 text-center">{title}</h2>
            <p className="mt-2 text-muted-foreground text-center max-w-md">
                {description}
            </p>
            <div className="flex gap-4 mt-8">
                {showBackButton && (
                    <Button
                        variant="outline"
                        onClick={() => router.back()}
                    >
                        Вернуться назад
                    </Button>
                )}
                {showHomeButton && (
                    <Link href="/">
                        <Button>
                            На главную
                        </Button>
                    </Link>
                )}
            </div>
        </div>
    );
}

// File: components\layout\NavBar.tsx
'use client';

import Image from 'next/image';
import { useAuth } from '@/hooks/auth/useAuth';
import { useLogout } from '@/hooks/auth/useLogout';
import Container from "@/components/Container";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Car, Menu, X, Users, FileEdit, LucideIcon, User, CalendarRange } from "lucide-react";
import { useState } from "react";

interface NavItem {
    label: string;
    href: string;
    icon?: LucideIcon;
}

// Базовые пункты меню для неавторизованных пользователей
const baseNavItems: NavItem[] = [
    {
        label: 'Поиск автомобиля',
        href: '/cars',
    },
    {
        label: 'Как это работает',
        href: '/how-it-works',
    },
    {
        label: 'О нас',
        href: '/about',
    },
    {
        label: 'Контакты',
        href: '/contact',
    },
];

// Пункты меню для авторизованного пользователя
const userNavItems: NavItem[] = [
    {
        label: 'Мои бронирования',
        href: '/dashboard',
    },
    {
        label: 'Профиль',
        href: '/profile',
    },
];

// Пункты меню для редактора
const editorNavItems: NavItem[] = [
    {
        label: 'Управление автомобилями',
        href: '/editor/cars',
        icon: FileEdit,
    },
    {
        label: 'Управление бронированиями',
        href: '/editor/bookings',
        icon: CalendarRange,
    }
];

// Пункты меню для администратора
const adminNavItems: NavItem[] = [
    {
        label: 'Управление пользователями',
        href: '/admin/users',
        icon: Users,
    }
];

const NavBar = () => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const { user } = useAuth();
    const { logout, loading: logoutLoading } = useLogout();

    const getNavItems = (): NavItem[] => {
        if (!user) {
            return baseNavItems;
        }

        if (user.role === 'ADMIN') {
            return [
                ...editorNavItems,
                ...adminNavItems,
                ...baseNavItems.slice(1),
                userNavItems[1],
            ];
        }

        if (user.role === 'EDITOR') {
            return [
                ...editorNavItems,
                ...baseNavItems.slice(1),
                userNavItems[1],
            ];
        }

        return [...baseNavItems, ...userNavItems];
    };

    const renderUserInfo = () => {
        if (!user) {
            return <></>;
        }

        return (
            <div className="hidden sm:flex items-center gap-3">
                <div className="flex items-center gap-3">
                    <div className="h-10 w-10 rounded-full overflow-hidden bg-muted">
                        {user.avatar ? (
                            <Image
                                src={user.avatar}
                                alt={`${user.firstName} ${user.lastName}`}
                                className="h-full w-full object-cover"
                            />
                        ) : (
                            <div className="h-full w-full flex items-center justify-center bg-primary/10">
                                <User className="h-6 w-6 text-muted-foreground" />
                            </div>
                        )}
                    </div>
                    <div className="text-sm">
                        <div className="font-medium">{user.firstName} {user.lastName}</div>
                        <div className="text-muted-foreground">{user.email}</div>
                    </div>
                </div>
                <Button
                    variant="outline"
                    className="text-base h-11"
                    onClick={() => logout()}
                    disabled={logoutLoading}
                >
                    Выйти
                </Button>
            </div>
        );
    };

    const renderMobileUserInfo = () => {
        if (!user) {
            return <></>;
        }

        return (
            <div className="flex items-center gap-3 px-3 py-2">
                <div className="h-10 w-10 rounded-full overflow-hidden bg-muted">
                    {user.avatar ? (
                        <Image
                            src={user.avatar}
                            alt={`${user.firstName} ${user.lastName}`}
                            className="h-full w-full object-cover"
                        />
                    ) : (
                        <div className="h-full w-full flex items-center justify-center bg-primary/10">
                            <User className="h-6 w-6 text-muted-foreground" />
                        </div>
                    )}
                </div>
                <div className="flex-1">
                    <div className="font-medium">{user.firstName} {user.lastName}</div>
                    <div className="text-muted-foreground text-sm">{user.email}</div>
                </div>
            </div>
        );
    };

    const navItems = getNavItems();

    return (
        <div className="sticky top-0 z-50 border-b bg-background/95 backdrop-blur">
            <Container>
                <div className="flex h-20 items-center justify-between">
                    {/* Logo & Brand */}
                    <Link href="/" className="flex items-center gap-3">
                        <Car className="h-8 w-8" />
                        <span className="font-bold text-2xl hidden sm:block">RentCar</span>
                    </Link>

                    {/* Desktop Navigation */}
                    <nav className="hidden md:flex items-center gap-8">
                        {navItems.map((item) => (
                            <Link
                                key={item.href}
                                href={item.href}
                                className="text-base font-medium transition-colors hover:text-primary"
                            >
                                <span className="flex items-center gap-2">
                                    {item.icon && <item.icon className="h-4 w-4" />}
                                    {item.label}
                                </span>
                            </Link>
                        ))}
                    </nav>

                    {/* Auth Buttons */}
                    <div className="flex items-center gap-4">
                        {!user ? (
                            <div className="hidden sm:flex items-center gap-3">
                                <Link href="/sign-in">
                                    <Button variant="outline" className="text-base px-6 py-2 h-11">
                                        Войти
                                    </Button>
                                </Link>
                                <Link href="/sign-up">
                                    <Button className="text-base px-6 py-2 h-11">
                                        Регистрация
                                    </Button>
                                </Link>
                            </div>
                        ) : (
                            renderUserInfo()
                        )}

                        {/* Mobile Menu Button */}
                        <button
                            className="md:hidden hover:bg-accent rounded-md p-2"
                            onClick={() => setIsMenuOpen(!isMenuOpen)}
                        >
                            {isMenuOpen ? (
                                <X className="h-7 w-7" />
                            ) : (
                                <Menu className="h-7 w-7" />
                            )}
                        </button>
                    </div>
                </div>

                {/* Mobile Menu */}
                {isMenuOpen && (
                    <div className="absolute top-20 left-0 right-0 bg-background border-b md:hidden">
                        <Container>
                            <nav className="flex flex-col py-6 gap-4">
                                {user && renderMobileUserInfo()}
                                {navItems.map((item) => (
                                    <Link
                                        key={item.href}
                                        href={item.href}
                                        className="text-lg px-3 py-2 hover:text-primary transition-colors"
                                        onClick={() => setIsMenuOpen(false)}
                                    >
                                        <span className="flex items-center gap-2">
                                            {item.icon && <item.icon className="h-4 w-4" />}
                                            {item.label}
                                        </span>
                                    </Link>
                                ))}

                                {/* Mobile Auth Buttons */}
                                {!user ? (
                                    <div className="flex flex-col gap-3 pt-6 border-t mt-2">
                                        <Link href="/sign-in" onClick={() => setIsMenuOpen(false)}>
                                            <Button variant="outline" className="w-full text-base h-11">
                                                Войти
                                            </Button>
                                        </Link>
                                        <Link href="/sign-up" onClick={() => setIsMenuOpen(false)}>
                                            <Button className="w-full text-base h-11">
                                                Регистрация
                                            </Button>
                                        </Link>
                                    </div>
                                ) : (
                                    <div className="pt-6 border-t mt-2">
                                        <Button
                                            variant="outline"
                                            className="w-full text-base h-11"
                                            onClick={() => {
                                                logout();
                                                setIsMenuOpen(false);
                                            }}
                                            disabled={logoutLoading}
                                        >
                                            Выйти
                                        </Button>
                                    </div>
                                )}
                            </nav>
                        </Container>
                    </div>
                )}
            </Container>
        </div>
    );
};

export default NavBar;

// File: components\sections\CTASection.tsx
import { Button } from "@/components/ui/button";

export const CTASection = () => {
  return (
    <section className="bg-primary text-primary-foreground py-16">
      <div className="max-w-4xl mx-auto text-center px-4">
        <h2 className="text-3xl font-bold mb-4">
          Готовы начать путешествие?
        </h2>
        <p className="text-lg mb-8">
          Присоединяйтесь к тысячам довольных клиентов, которые доверяют RentCar
        </p>
        <a href="/sign-up">
          <Button
            size="lg"
            variant="secondary"
            className="text-lg px-8"
          >
            Начать сейчас
          </Button>
        </a>
      </div>
    </section>
  );
};

// File: components\sections\FeaturedCarsSection.tsx
'use client';

import { Button } from "@/components/ui/button";
import CarCard from "@/components/cars/CarCard";
import React, { useState, useEffect } from 'react';
import type { Car } from "@/lib/types/car";
import Link from "next/link";

export default function FeaturedCarsSection() {
    const [cars, setCars] = useState<Car[]>([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchCars = async () => {
            try {
                const response = await fetch('/api/cars');
                if (response.ok) {
                    const { cars: fetchedCars } = await response.json() as { cars: Car[] };
                    const formattedCars: Car[] = fetchedCars.slice(0, 4).map(car => ({
                        ...car,
                        pricePerDay: Number(car.pricePerDay),
                        createdAt: new Date(car.createdAt),
                        updatedAt: new Date(car.updatedAt)
                    }));
                    setCars(formattedCars);
                }
            } catch (error) {
                console.error('Error fetching cars:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchCars();
    }, []);

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-[400px]">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <section className="px-4">
            <div className="max-w-6xl mx-auto">
                <div className="flex justify-between items-center mb-8">
                    <h2 className="text-3xl font-bold">Популярные автомобили</h2>
                    <Link href="/cars">
                        <Button variant="outline">Все автомобили</Button>
                    </Link>
                </div>
                <div className="grid md:grid-cols-2 gap-6">
                    {cars.map((car) => (
                        <CarCard key={car.id} car={car} />
                    ))}
                </div>
            </div>
        </section>
    );
}

// File: components\sections\FeatureSection.tsx
import { Shield, Clock, Heart, LucideIcon } from "lucide-react";

interface Feature {
    icon: LucideIcon;
    title: string;
    description: string;
}

const features: Feature[] = [
    {
        icon: Shield,
        title: "Безопасно и надёжно",
        description: "Все наши автомобили регулярно обслуживаются и тщательно проверяются"
    },
    {
        icon: Clock,
        title: "Поддержка 24/7",
        description: "Наша служба поддержки всегда готова помочь вам"
    },
    {
        icon: Heart,
        title: "Лучшие цены",
        description: "Конкурентные цены без скрытых платежей и комиссий"
    }
];

export const FeatureSection = () => {
    return (
        <section className="px-4">
            <div className="max-w-6xl mx-auto">
                <h2 className="text-3xl font-bold text-center mb-12">
                    Почему выбирают RentCar?
                </h2>
                <div className="grid md:grid-cols-3 gap-8">
                    {features.map((feature) => (
                        <div key={feature.title} className="flex flex-col items-center text-center space-y-4">
                            <div className="h-14 w-14 rounded-full bg-primary/10 flex items-center justify-center">
                                <feature.icon className="h-8 w-8 text-primary" />
                            </div>
                            <h3 className="text-xl font-semibold">{feature.title}</h3>
                            <p className="text-muted-foreground">
                                {feature.description}
                            </p>
                        </div>
                    ))}
                </div>
            </div>
        </section>
    );
};

// File: components\sections\HeroSection.tsx
import { Button } from "@/components/ui/button";

export const HeroSection = () => {
    return (
        <section className="relative py-20 flex flex-col items-center text-center space-y-8">
            <div className="absolute inset-0 bg-gradient-to-b from-secondary to-background" />
            <div className="relative space-y-4 max-w-3xl mx-auto px-4">
                <h1 className="text-4xl md:text-6xl font-bold">
                    Найдите идеальный автомобиль для любой поездки
                </h1>
                <p className="text-xl text-muted-foreground">
                    Выбирайте из нашего широкого ассортимента премиальных автомобилей по выгодным ценам
                </p>
                <div className="flex flex-col sm:flex-row gap-4 justify-center pt-4">
                    <a href="/cars">
                        <Button size="lg" className="text-lg px-8">
                            Смотреть автомобили
                        </Button>
                    </a>
                    <a href="/how-it-works">
                        <Button size="lg" variant="outline" className="text-lg px-8">
                            Как это работает
                        </Button>
                    </a>
                </div>
            </div>
        </section>
    );
};

// File: components\ui\button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


// File: components\ui\calendar.tsx
"use client"

import * as React from "react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
                      className,
                      classNames,
                      showOutsideDays = true,
                      ...props
                  }: CalendarProps) {
    return (
        <DayPicker
            showOutsideDays={showOutsideDays}
            className={cn("p-3", className)}
            classNames={{
                months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
                month: "space-y-4",
                caption: "flex justify-center pt-1 relative items-center",
                caption_label: "text-sm font-medium",
                nav: "space-x-1 flex items-center",
                nav_button: cn(
                    buttonVariants({ variant: "outline" }),
                    "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
                ),
                nav_button_previous: "absolute left-1",
                nav_button_next: "absolute right-1",
                table: "w-full border-collapse space-y-1",
                head_row: "flex",
                head_cell:
                    "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
                row: "flex w-full mt-2",
                cell: cn(
                    "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
                    props.mode === "range"
                        ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
                        : "[&:has([aria-selected])]:rounded-md"
                ),
                day: cn(
                    buttonVariants({ variant: "ghost" }),
                    "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
                ),
                day_range_start: "day-range-start",
                day_range_end: "day-range-end",
                day_selected:
                    "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
                day_today: "bg-accent text-accent-foreground",
                day_outside:
                    "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
                day_disabled: "text-muted-foreground opacity-50",
                day_range_middle:
                    "aria-selected:bg-accent aria-selected:text-accent-foreground",
                day_hidden: "invisible",
                ...classNames,
            }}
            components={{
                IconLeft: () => <ChevronLeftIcon className="h-4 w-4" />,
                IconRight: () => <ChevronRightIcon className="h-4 w-4" />,
            }}
            {...props}
        />
    )
}
Calendar.displayName = "Calendar"

export { Calendar }


// File: components\ui\loading.tsx
export default function Loading() {
    return (
        <div className="flex flex-col items-center justify-center min-h-[70vh]">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            <p className="mt-4 text-muted-foreground">Загрузка...</p>
        </div>
    );
}

// File: components\ui\pagination.tsx
import { Button } from './button';
import { ChevronLeft, ChevronRight } from 'lucide-react';

interface PaginationProps {
    currentPage: number;
    totalPages: number;
    onPageChange: (page: number) => void;
}

export function Pagination({ currentPage, totalPages, onPageChange }: PaginationProps) {
    const pages = Array.from({ length: totalPages }, (_, i) => i + 1);

    return (
        <div className="flex justify-center items-center gap-2 mt-8">
            <Button
                variant="outline"
                size="icon"
                onClick={() => onPageChange(currentPage - 1)}
                disabled={currentPage === 1}
            >
                <ChevronLeft className="h-4 w-4" />
            </Button>

            {pages.map((page) => (
                <Button
                    key={page}
                    variant={currentPage === page ? "default" : "outline"}
                    className="w-10 h-10"
                    onClick={() => onPageChange(page)}
                >
                    {page}
                </Button>
            ))}

            <Button
                variant="outline"
                size="icon"
                onClick={() => onPageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
            >
                <ChevronRight className="h-4 w-4" />
            </Button>
        </div>
    );
}

// File: db\init.sql
CREATE TYPE "UserRole" AS ENUM ('ADMIN', 'EDITOR', 'USER');
CREATE TYPE "BookingStatus" AS ENUM ('PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED');
CREATE TYPE "PaymentStatus" AS ENUM ('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED');

-- Create Users table
CREATE TABLE "User"
(
    id                     TEXT PRIMARY KEY,
    email                  TEXT UNIQUE              NOT NULL,
    password               TEXT                     NOT NULL,
    role                   "UserRole"               NOT NULL DEFAULT 'USER',
    "firstName"            TEXT                     NOT NULL,
    "lastName"             TEXT                     NOT NULL,
    "isVerified"           BOOLEAN                  NOT NULL DEFAULT false,
    "verificationToken"    TEXT UNIQUE,
    "resetPasswordToken"   TEXT UNIQUE,
    "resetPasswordExpires" TIMESTAMP WITH TIME ZONE,
    "lastLogin"            TIMESTAMP WITH TIME ZONE,
    "createdAt"            TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt"            TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create RefreshToken table
CREATE TABLE "RefreshToken"
(
    id          TEXT PRIMARY KEY,
    token       TEXT UNIQUE              NOT NULL,
    "userId"    TEXT                     NOT NULL REFERENCES "User" (id) ON DELETE CASCADE,
    "expiresAt" TIMESTAMP WITH TIME ZONE NOT NULL,
    "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create DrivingLicense table
CREATE TABLE "DrivingLicense"
(
    id           TEXT PRIMARY KEY,
    number       TEXT UNIQUE              NOT NULL,
    "issueDate"  TIMESTAMP WITH TIME ZONE NOT NULL,
    "expiryDate" TIMESTAMP WITH TIME ZONE NOT NULL,
    "userId"     TEXT                     NOT NULL UNIQUE REFERENCES "User" (id) ON DELETE CASCADE
);

-- Create Car table
CREATE TABLE "Car"
(
    id               TEXT PRIMARY KEY,
    make             TEXT                     NOT NULL,
    model            TEXT                     NOT NULL,
    year             INTEGER                  NOT NULL,
    "pricePerDay"    DECIMAL(10, 2)           NOT NULL,
    type             TEXT                     NOT NULL,
    images           TEXT[] NOT NULL,
    features         TEXT[] NOT NULL,
    availability     BOOLEAN                  NOT NULL DEFAULT true,
    description      TEXT,
    "createdBy"      TEXT                     NOT NULL,
    "lastModifiedBy" TEXT                     NOT NULL,
    "createdAt"      TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt"      TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create CarSpecification table
CREATE TABLE "CarSpecification"
(
    id           TEXT PRIMARY KEY,
    transmission TEXT,
    "fuelType"   TEXT,
    seats        INTEGER,
    luggage      INTEGER,
    mileage      TEXT,
    "carId"      TEXT NOT NULL UNIQUE REFERENCES "Car" (id) ON DELETE CASCADE
);

-- Create Booking table
CREATE TABLE "Booking"
(
    id           TEXT PRIMARY KEY,
    "startDate"  TIMESTAMP WITH TIME ZONE NOT NULL,
    "endDate"    TIMESTAMP WITH TIME ZONE NOT NULL,
    "totalPrice" DECIMAL(10, 2)           NOT NULL,
    status       "BookingStatus"          NOT NULL DEFAULT 'PENDING',
    "carId"      TEXT                     NOT NULL REFERENCES "Car" (id),
    "userId"     TEXT                     NOT NULL REFERENCES "User" (id),
    "createdAt"  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt"  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create BookingExtras table
CREATE TABLE "BookingExtras"
(
    id                 TEXT PRIMARY KEY,
    insurance          BOOLEAN NOT NULL DEFAULT false,
    gps                BOOLEAN NOT NULL DEFAULT false,
    "childSeat"        BOOLEAN NOT NULL DEFAULT false,
    "additionalDriver" BOOLEAN NOT NULL DEFAULT false,
    "bookingId"        TEXT    NOT NULL UNIQUE REFERENCES "Booking" (id) ON DELETE CASCADE
);

-- Create Payment table
CREATE TABLE "Payment"
(
    id          TEXT PRIMARY KEY,
    amount      DECIMAL(10, 2)           NOT NULL,
    status      "PaymentStatus"          NOT NULL DEFAULT 'PENDING',
    method      TEXT,
    "bookingId" TEXT                     NOT NULL UNIQUE REFERENCES "Booking" (id) ON DELETE CASCADE,
    "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create Maintenance table
CREATE TABLE "Maintenance"
(
    id            TEXT PRIMARY KEY,
    type          TEXT                     NOT NULL,
    description   TEXT                     NOT NULL,
    date          TIMESTAMP WITH TIME ZONE NOT NULL,
    cost          DECIMAL(10, 2)           NOT NULL,
    "carId"       TEXT                     NOT NULL REFERENCES "Car" (id),
    "performedBy" TEXT                     NOT NULL,
    "createdAt"   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt"   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes
CREATE INDEX "User_email_idx" ON "User" (email);
CREATE INDEX "User_role_idx" ON "User" (role);
CREATE INDEX "RefreshToken_userId_idx" ON "RefreshToken" ("userId");
CREATE INDEX "Car_make_model_idx" ON "Car" (make, model);
CREATE INDEX "Car_type_idx" ON "Car" (type);
CREATE INDEX "Car_availability_idx" ON "Car" (availability);
CREATE INDEX "Booking_userId_idx" ON "Booking" ("userId");
CREATE INDEX "Booking_status_idx" ON "Booking" (status);
CREATE INDEX "Booking_dates_idx" ON "Booking" ("startDate", "endDate");
CREATE INDEX "Maintenance_carId_idx" ON "Maintenance" ("carId");
CREATE INDEX "Maintenance_date_idx" ON "Maintenance" (date);

-- Insert admin user.ts
INSERT INTO "User" (id,
                    email,
                    password,
                    role,
                    "firstName",
                    "lastName",
                    "isVerified")
VALUES ('admin',
        'admin@example.com',
        '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LHHSwQUSxPFIWYw2C', -- password: admin123
        'ADMIN',
        'Admin',
        'User',
        true);

// File: hooks\useCarFilters.ts
'use client'

import { useState } from 'react';
import type { CarFilters, PriceRange } from '@/lib/types/filters';
import type { Car } from '@/lib/types/car';

const initialFilters: CarFilters = {
    search: '',
    types: [],
    features: []
};

export const useCarFilters = (cars: Car[]) => {
    const [filters, setFilters] = useState<CarFilters>(initialFilters);

    const updateSearch = (search: string) => {
        setFilters(prev => ({ ...prev, search }));
    };

    const updatePriceRange = (priceRange: PriceRange) => {
        setFilters(prev => ({ ...prev, priceRange }));
    };

    const toggleType = (type: string) => {
        setFilters(prev => ({
            ...prev,
            types: prev.types.includes(type)
                ? prev.types.filter(t => t !== type)
                : [...prev.types, type]
        }));
    };

    const toggleFeature = (feature: string) => {
        setFilters(prev => ({
            ...prev,
            features: prev.features.includes(feature)
                ? prev.features.filter(f => f !== feature)
                : [...prev.features, feature]
        }));
    };

    const filteredCars = cars.filter(car => {
        // Search filter
        if (filters.search) {
            const searchTerm = filters.search.toLowerCase();
            const matchesSearch =
                car.make.toLowerCase().includes(searchTerm) ||
                car.model.toLowerCase().includes(searchTerm) ||
                car.type.toLowerCase().includes(searchTerm);
            if (!matchesSearch) return false;
        }

        // Type filter
        if (filters.types.length > 0) {
            if (!filters.types.includes(car.type)) return false;
        }

        // Feature filter
        if (filters.features.length > 0) {
            const hasAllFeatures = filters.features.every(feature =>
                car.features.includes(feature)
            );
            if (!hasAllFeatures) return false;
        }

        // Price range filter
        if (filters.priceRange) {
            if (
                car.pricePerDay < filters.priceRange.min ||
                car.pricePerDay > filters.priceRange.max
            ) return false;
        }

        return true;
    });

    return {
        filters,
        updateSearch,
        updatePriceRange,
        toggleType,
        toggleFeature,
        filteredCars
    };
};

// File: hooks\auth\useAuth.ts
import { useAuthStore } from '@/auth/useAuthStore';
import { useEffect, useCallback } from 'react';
import type { User } from '@/lib/types/user';

export const useAuth = () => {
    const { user, setUser, isAuthenticated, isAdmin, isEditor } = useAuthStore();

    const checkAuth = useCallback(async () => {
        try {
            const response = await fetch('/api/auth/me');
            if (response.ok) {
                const data = await response.json();
                setUser(data.user);
            } else {
                setUser(null);
            }
        } catch (error) {
            console.error('Auth check error:', error);
            setUser(null);
        }
    }, [setUser]);

    useEffect(() => {
        if (!user) {
            checkAuth();
        }
    }, [user, checkAuth]);

    const login = async (email: string, password: string) => {
        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password }),
            });

            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Ошибка входа');
            }

            const data = await response.json();
            setUser(data.user);
            return data; // Возвращаем данные, включая пользователя
        } catch (error) {
            throw error;
        }
    };

    const updateUserData = useCallback(async () => {
        if (user) {
            await checkAuth();
        }
    }, [user, checkAuth]);

    return {
        user: user as User | null,
        setUser,
        isAuthenticated,
        isAdmin,
        isEditor,
        login,
        updateUserData
    };
};

// File: hooks\auth\useLogin.ts
import { useState } from 'react';
import { useAuthStore } from '@/auth/useAuthStore';

export const useLogin = () => {
    const [loading, setLoading] = useState(false);
    const setUser = useAuthStore((state) => state.setUser);

    const login = async (email: string, password: string) => {
        setLoading(true);
        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password }),
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Ошибка входа');
            }

            const data = await response.json();
            setUser(data.user);
        } finally {
            setLoading(false);
        }
    };

    return { login, loading };
};

// File: hooks\auth\useLogout.ts
import { useState } from 'react';
import { useAuthStore } from '@/auth/useAuthStore';
import { useRouter } from 'next/navigation';

export const useLogout = () => {
    const [loading, setLoading] = useState(false);
    const setUser = useAuthStore((state) => state.setUser);
    const router = useRouter();

    const logout = async () => {
        setLoading(true);
        try {
            await fetch('/api/auth/logout', { method: 'POST' });
            setUser(null);
            router.push('/');
        } finally {
            setLoading(false);
        }
    };

    return { logout, loading };
};

// File: lib\auth.ts
import { cookies } from 'next/headers';
import jwt from 'jsonwebtoken';
import { prisma } from './prisma';

export async function getAuthUser() {
    const token = cookies().get('auth-token')?.value;

    if (!token) {
        return null;
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET!) as {
            userId: string;
        };

        const user = await prisma.user.findUnique({
            where: { id: decoded.userId },
        });

        return user;
    } catch (_error) {
        console.error('Auth error:', _error);
        return null;
    }
}

export async function validateAndRefreshToken() {
    const token = cookies().get('auth-token')?.value;
    const refreshToken = cookies().get('refresh-token')?.value;

    if (!token || !refreshToken) {
        return null;
    }

    try {
        jwt.verify(token, process.env.JWT_SECRET!);
        return token;
    } catch (_error) {
        try {
            const decoded = jwt.verify(
                refreshToken,
                process.env.REFRESH_TOKEN_SECRET!
            ) as { userId: string };

            const savedToken = await prisma.refreshToken.findFirst({
                where: {
                    token: refreshToken,
                    userId: decoded.userId,
                    expiresAt: { gt: new Date() },
                },
            });

            if (!savedToken) {
                return null;
            }

            const user = await prisma.user.findUnique({
                where: { id: decoded.userId },
            });

            if (!user) {
                return null;
            }

            // Создаем новый токен
            const newToken = jwt.sign(
                { userId: user.id, role: user.role },
                process.env.JWT_SECRET!,
                { expiresIn: '1d' }
            );

            // Обновляем куки
            cookies().set('auth-token', newToken, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'lax',
                maxAge: 60 * 60 * 24,
            });

            return newToken;
        } catch (_error) {
            return null;
        }
    }
}

// File: lib\prisma.ts
import { PrismaClient } from '@prisma/client'

const globalForPrisma = global as unknown as { prisma: PrismaClient }

export const prisma = globalForPrisma.prisma || new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

// File: lib\utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// File: lib\data\cars.ts
// lib/data/cars.ts
import { prisma } from '@/lib/prisma';

export const getCarById = async (id: string) => {
    const car = await prisma.car.findUnique({
        where: { id },
        include: {
            specifications: true
        }
    });

    if (!car) {
        return null;
    }

    return {
        ...car,
        image: car.images[0] || null
    };
};

export const getFeaturedCars = async () => {
    const cars = await prisma.car.findMany({
        where: { availability: true },
        include: {
            specifications: true
        },
        take: 4
    });

    return cars.map(car => ({
        ...car,
        image: car.images[0] || null
    }));
};

// File: lib\middleware\errorHandler.ts
import { NextResponse } from 'next/server';
import { Prisma } from '@prisma/client';

export function handleDatabaseError(error: unknown) {
    console.error('Database Error:', error);

    if (error instanceof Prisma.PrismaClientKnownRequestError) {
        switch (error.code) {
            case 'P2002':
                return NextResponse.json(
                    { error: 'Запись с такими данными уже существует' },
                    { status: 409 }
                );
            case 'P2025':
                return NextResponse.json(
                    { error: 'Запись не найдена' },
                    { status: 404 }
                );
            case 'P2003':
                return NextResponse.json(
                    { error: 'Нарушение ограничений внешнего ключа' },
                    { status: 400 }
                );
            default:
                return NextResponse.json(
                    { error: 'Ошибка базы данных' },
                    { status: 500 }
                );
        }
    }

    if (error instanceof Prisma.PrismaClientValidationError) {
        return NextResponse.json(
            { error: 'Некорректные данные запроса' },
            { status: 400 }
        );
    }

    return NextResponse.json(
        { error: 'Внутренняя ошибка сервера' },
        { status: 500 }
    );
}

// File: lib\types\car.ts
// lib/types/car.ts
export interface Car {
    id: string;
    make: string;
    model: string;
    year: number;
    pricePerDay: number;
    type: string;
    features: string[];
    availability: boolean;
    image?: string | null;
    images: string[];
    description: string | null;
    specifications: {
        id: string;
        transmission: string | null;
        fuelType: string | null;
        seats: number | null;
        luggage: number | null;
        mileage: string | null;
        carId: string;
    } | null;
    createdBy: string;
    lastModifiedBy: string;
    createdAt: Date;
    updatedAt: Date;
}

// File: lib\types\filters.ts
export interface PriceRange {
    min: number;
    max: number;
}

export interface CarFilters {
    search: string;
    priceRange?: PriceRange;
    types: string[];
    features: string[];
}

// File: lib\types\pagination.ts
export interface PaginationData {
    total: number;
    pages: number;
    currentPage: number;
    limit: number;
}

export interface PaginatedResponse<T> {
    data: T[];
    pagination: PaginationData;
}

// File: lib\types\user.ts
export type UserRole = 'ADMIN' | 'EDITOR' | 'USER';

export interface User {
    id: string;
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    avatar: string | null;
    role: UserRole;
    isVerified: boolean;
    verificationToken: string | null;
    resetPasswordToken: string | null;
    resetPasswordExpires: Date | null;
    lastLogin: Date | null;
    createdAt: Date;
    updatedAt: Date;
}

// File: lib\utils\errorHandler.ts
interface ErrorResponse {
    response?: {
        data?: {
            error?: string;
        };
    };
    message?: string;
    status?: number;
}

export function handleClientError(error: ErrorResponse): string {    // Если есть ответ от API с сообщением об ошибке
    if (typeof error === 'object' && error !== null) {
        // Проверяем наличие response с данными
        if (error.response?.data?.error) {
            return error.response.data.error;
        }

        // Проверяем наличие сообщения в ошибке
        if (error.message) {
            return error.message;
        }

        // Проверяем статус ошибки
        if (error.status) {
            switch (error.status) {
                case 400:
                    return 'Некорректный запрос';
                case 401:
                    return 'Необходима авторизация';
                case 403:
                    return 'Доступ запрещен';
                case 404:
                    return 'Ресурс не найден';
                case 409:
                    return 'Конфликт данных';
                case 422:
                    return 'Ошибка валидации данных';
                case 429:
                    return 'Слишком много запросов';
                case 500:
                    return 'Внутренняя ошибка сервера';
                case 502:
                    return 'Сервер временно недоступен';
                case 503:
                    return 'Сервис временно недоступен';
                default:
                    return 'Произошла ошибка';
            }
        }
    }

    // Если ошибка пришла в виде строки
    if (typeof error === 'string') {
        return error;
    }

    // Возвращаем общее сообщение об ошибке, если не смогли определить конкретную причину
    return 'Произошла непредвиденная ошибка';
}

// File: lib\utils\format.ts
export const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU').format(price);
};

// File: prisma\schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // Hashed password
  role          UserRole  @default(USER)
  firstName     String
  lastName      String
  avatar        String?
  isVerified    Boolean   @default(false)
  verificationToken String? @unique
  resetPasswordToken String? @unique
  resetPasswordExpires DateTime?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshTokens RefreshToken[]
  bookings      Booking[]
  drivingLicense DrivingLicense?

  @@index([email])
  @@index([role])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model DrivingLicense {
  id            String    @id @default(cuid())
  number        String    @unique
  issueDate     DateTime
  expiryDate    DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
}

model Car {
  id            String    @id @default(cuid())
  make          String
  model         String
  year          Int
  pricePerDay   Decimal   @db.Decimal(10, 2)
  type          String
  images        String[]
  features      String[]
  availability  Boolean   @default(true)
  description   String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String
  lastModifiedBy String
  bookings      Booking[]
  specifications CarSpecification?
  maintenance    Maintenance[]

  @@index([make, model])
  @@index([type])
  @@index([availability])
}

// Rest of the models remain the same as in previous schema
model CarSpecification {
  id            String   @id @default(cuid())
  transmission  String?
  fuelType      String?
  seats         Int?
  luggage       Int?
  mileage       String?
  car           Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId         String   @unique
}

model Booking {
  id            String    @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  totalPrice    Decimal   @db.Decimal(10, 2)
  status        BookingStatus @default(PENDING)
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  extras        BookingExtras?
  payment       Payment?

  @@index([userId])
  @@index([status])
  @@index([startDate, endDate])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model BookingExtras {
  id               String   @id @default(cuid())
  insurance        Boolean  @default(false)
  gps              Boolean  @default(false)
  childSeat        Boolean  @default(false)
  additionalDriver Boolean  @default(false)
  booking          Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId        String   @unique
}

model Payment {
  id            String    @id @default(cuid())
  amount        Decimal   @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  method        String?
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId     String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Maintenance {
  id            String    @id @default(cuid())
  type          String
  description   String
  date          DateTime
  cost          Decimal   @db.Decimal(10, 2)
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  performedBy   String

  @@index([carId])
  @@index([date])
}

// File: prisma\seed.ts
// prisma/seed.ts
import { PrismaClient } from '@prisma/client'
import * as bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
    // Очистка существующих данных
    await prisma.car.deleteMany()
    await prisma.user.deleteMany()

    // Создание админа
    const hashedPassword = await bcrypt.hash('admin123', 10)
    const admin = await prisma.user.create({
        data: {
            email: 'admin@example.com',
            password: hashedPassword,
            firstName: 'Admin',
            lastName: 'User',
            role: 'ADMIN',
            isVerified: true,
        },
    })

    // Создание автомобилей
    await prisma.car.create({
        data: {
            id: 'camry-2023',
            make: 'Toyota',
            model: 'Camry',
            year: 2023,
            pricePerDay: 4500,
            type: 'Седан',
            features: ['Автомат', 'Климат-контроль', 'Круиз-контроль', 'Подогрев сидений'],
            images: ['/vehicles/toyota-camry.png'],
            availability: true,
            description: 'Toyota Camry - это комфортабельный седан бизнес-класса',
            createdBy: admin.id,
            lastModifiedBy: admin.id,
            specifications: {
                create: {
                    transmission: 'Автоматическая',
                    fuelType: 'Бензин',
                    seats: 5,
                    luggage: 480
                }
            }
        }
    })

    await prisma.car.create({
        data: {
            id: 'bmw-x5-2023',
            make: 'BMW',
            model: 'X5',
            year: 2023,
            pricePerDay: 11000,
            type: 'Кроссовер',
            features: ['Полный привод', 'Кожаный салон', 'Панорамная крыша', 'Автопилот'],
            images: ['/vehicles/bmw-x5.png'],
            availability: true,
            description: 'BMW X5 - роскошный среднеразмерный кроссовер',
            createdBy: admin.id,
            lastModifiedBy: admin.id,
            specifications: {
                create: {
                    transmission: 'Автоматическая',
                    fuelType: 'Бензин',
                    seats: 5,
                    luggage: 650
                }
            }
        }
    })

    console.log('Seed data created successfully!')
}

main()
    .catch((e) => {
        console.error(e)
        process.exit(1)
    })
    .finally(async () => {
        await prisma.$disconnect()
    })

// File: prisma\migrations\20250103015824_npx_prisma_db_seed\migration.sql
-- CreateEnum
CREATE TYPE "UserRole" AS ENUM ('ADMIN', 'EDITOR', 'USER');

-- CreateEnum
CREATE TYPE "BookingStatus" AS ENUM ('PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED');

-- CreateEnum
CREATE TYPE "PaymentStatus" AS ENUM ('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED');

-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    "role" "UserRole" NOT NULL DEFAULT 'USER',
    "firstName" TEXT NOT NULL,
    "lastName" TEXT NOT NULL,
    "isVerified" BOOLEAN NOT NULL DEFAULT false,
    "verificationToken" TEXT,
    "resetPasswordToken" TEXT,
    "resetPasswordExpires" TIMESTAMP(3),
    "lastLogin" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "RefreshToken" (
    "id" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expiresAt" TIMESTAMP(3) NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "RefreshToken_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "DrivingLicense" (
    "id" TEXT NOT NULL,
    "number" TEXT NOT NULL,
    "issueDate" TIMESTAMP(3) NOT NULL,
    "expiryDate" TIMESTAMP(3) NOT NULL,
    "userId" TEXT NOT NULL,

    CONSTRAINT "DrivingLicense_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Car" (
    "id" TEXT NOT NULL,
    "make" TEXT NOT NULL,
    "model" TEXT NOT NULL,
    "year" INTEGER NOT NULL,
    "pricePerDay" DECIMAL(10,2) NOT NULL,
    "type" TEXT NOT NULL,
    "images" TEXT[],
    "features" TEXT[],
    "availability" BOOLEAN NOT NULL DEFAULT true,
    "description" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "createdBy" TEXT NOT NULL,
    "lastModifiedBy" TEXT NOT NULL,

    CONSTRAINT "Car_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "CarSpecification" (
    "id" TEXT NOT NULL,
    "transmission" TEXT,
    "fuelType" TEXT,
    "seats" INTEGER,
    "luggage" INTEGER,
    "mileage" TEXT,
    "carId" TEXT NOT NULL,

    CONSTRAINT "CarSpecification_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Booking" (
    "id" TEXT NOT NULL,
    "startDate" TIMESTAMP(3) NOT NULL,
    "endDate" TIMESTAMP(3) NOT NULL,
    "totalPrice" DECIMAL(10,2) NOT NULL,
    "status" "BookingStatus" NOT NULL DEFAULT 'PENDING',
    "carId" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Booking_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "BookingExtras" (
    "id" TEXT NOT NULL,
    "insurance" BOOLEAN NOT NULL DEFAULT false,
    "gps" BOOLEAN NOT NULL DEFAULT false,
    "childSeat" BOOLEAN NOT NULL DEFAULT false,
    "additionalDriver" BOOLEAN NOT NULL DEFAULT false,
    "bookingId" TEXT NOT NULL,

    CONSTRAINT "BookingExtras_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Payment" (
    "id" TEXT NOT NULL,
    "amount" DECIMAL(10,2) NOT NULL,
    "status" "PaymentStatus" NOT NULL DEFAULT 'PENDING',
    "method" TEXT,
    "bookingId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Payment_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Maintenance" (
    "id" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "date" TIMESTAMP(3) NOT NULL,
    "cost" DECIMAL(10,2) NOT NULL,
    "carId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "performedBy" TEXT NOT NULL,

    CONSTRAINT "Maintenance_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "User_verificationToken_key" ON "User"("verificationToken");

-- CreateIndex
CREATE UNIQUE INDEX "User_resetPasswordToken_key" ON "User"("resetPasswordToken");

-- CreateIndex
CREATE INDEX "User_email_idx" ON "User"("email");

-- CreateIndex
CREATE INDEX "User_role_idx" ON "User"("role");

-- CreateIndex
CREATE UNIQUE INDEX "RefreshToken_token_key" ON "RefreshToken"("token");

-- CreateIndex
CREATE INDEX "RefreshToken_userId_idx" ON "RefreshToken"("userId");

-- CreateIndex
CREATE UNIQUE INDEX "DrivingLicense_number_key" ON "DrivingLicense"("number");

-- CreateIndex
CREATE UNIQUE INDEX "DrivingLicense_userId_key" ON "DrivingLicense"("userId");

-- CreateIndex
CREATE INDEX "Car_make_model_idx" ON "Car"("make", "model");

-- CreateIndex
CREATE INDEX "Car_type_idx" ON "Car"("type");

-- CreateIndex
CREATE INDEX "Car_availability_idx" ON "Car"("availability");

-- CreateIndex
CREATE UNIQUE INDEX "CarSpecification_carId_key" ON "CarSpecification"("carId");

-- CreateIndex
CREATE INDEX "Booking_userId_idx" ON "Booking"("userId");

-- CreateIndex
CREATE INDEX "Booking_status_idx" ON "Booking"("status");

-- CreateIndex
CREATE INDEX "Booking_startDate_endDate_idx" ON "Booking"("startDate", "endDate");

-- CreateIndex
CREATE UNIQUE INDEX "BookingExtras_bookingId_key" ON "BookingExtras"("bookingId");

-- CreateIndex
CREATE UNIQUE INDEX "Payment_bookingId_key" ON "Payment"("bookingId");

-- CreateIndex
CREATE INDEX "Maintenance_carId_idx" ON "Maintenance"("carId");

-- CreateIndex
CREATE INDEX "Maintenance_date_idx" ON "Maintenance"("date");

-- AddForeignKey
ALTER TABLE "RefreshToken" ADD CONSTRAINT "RefreshToken_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "DrivingLicense" ADD CONSTRAINT "DrivingLicense_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "CarSpecification" ADD CONSTRAINT "CarSpecification_carId_fkey" FOREIGN KEY ("carId") REFERENCES "Car"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Booking" ADD CONSTRAINT "Booking_carId_fkey" FOREIGN KEY ("carId") REFERENCES "Car"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Booking" ADD CONSTRAINT "Booking_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "BookingExtras" ADD CONSTRAINT "BookingExtras_bookingId_fkey" FOREIGN KEY ("bookingId") REFERENCES "Booking"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Payment" ADD CONSTRAINT "Payment_bookingId_fkey" FOREIGN KEY ("bookingId") REFERENCES "Booking"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Maintenance" ADD CONSTRAINT "Maintenance_carId_fkey" FOREIGN KEY ("carId") REFERENCES "Car"("id") ON DELETE RESTRICT ON UPDATE CASCADE;


// File: prisma\migrations\20250105074935_add_user_avatar\migration.sql
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "avatar" TEXT;


