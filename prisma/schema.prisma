generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // Hashed password
  role          UserRole  @default(USER)
  firstName     String
  lastName      String
  avatar        String?
  isVerified    Boolean   @default(false)
  verificationToken String? @unique
  resetPasswordToken String? @unique
  resetPasswordExpires DateTime?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshTokens RefreshToken[]
  bookings      Booking[]
  drivingLicense DrivingLicense?

  @@index([email])
  @@index([role])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model DrivingLicense {
  id            String    @id @default(cuid())
  number        String    @unique
  issueDate     DateTime
  expiryDate    DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
}

model Car {
  id            String    @id @default(cuid())
  make          String
  model         String
  year          Int
  pricePerDay   Decimal   @db.Decimal(10, 2)
  type          String
  images        String[]
  features      String[]
  availability  Boolean   @default(true)
  description   String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String
  lastModifiedBy String
  bookings      Booking[]
  specifications CarSpecification?
  maintenance    Maintenance[]

  @@index([make, model])
  @@index([type])
  @@index([availability])
}

// Rest of the models remain the same as in previous schema
model CarSpecification {
  id            String   @id @default(cuid())
  transmission  String?
  fuelType      String?
  seats         Int?
  luggage       Int?
  mileage       String?
  car           Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId         String   @unique
}

model Booking {
  id            String    @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  totalPrice    Decimal   @db.Decimal(10, 2)
  status        BookingStatus @default(PENDING)
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  extras        BookingExtras?
  payment       Payment?

  @@index([userId])
  @@index([status])
  @@index([startDate, endDate])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model BookingExtras {
  id               String   @id @default(cuid())
  insurance        Boolean  @default(false)
  gps              Boolean  @default(false)
  childSeat        Boolean  @default(false)
  additionalDriver Boolean  @default(false)
  booking          Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId        String   @unique
}

model Payment {
  id            String    @id @default(cuid())
  amount        Decimal   @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  method        String?
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId     String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Maintenance {
  id            String    @id @default(cuid())
  type          String
  description   String
  date          DateTime
  cost          Decimal   @db.Decimal(10, 2)
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  performedBy   String

  @@index([carId])
  @@index([date])
}